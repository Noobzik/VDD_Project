<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
<entry key="jsNamespace" type="xstring" value="knimeGroupedBarChart"/>
<config key="jsCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="/* global d3:false, kt:false, nv:false */%%00010window.knimeGroupedBarChart = (function () {%%00010%%00010    var barChart = {};%%00010    var MIN_HEIGHT = 100;%%00010    var MIN_WIDTH = 100;%%00010    var layoutContainer,%%00010        _representation,%%00010        _value,%%00010        chart,%%00010        svg,%%00010        knimeTable,%%00010        plotData,%%00010        wrappedPlotData,%%00010        colorRange,%%00010        categories,%%00010        freqCols,%%00010        _translator,%%00010        _keyNameMap,%%00010        _incomingTable,%%00010%%00010        /**%%00010         * 2d-array where for each category (indexing follows categories array) we%%00010         * store an array of those frequency columns, which have a missing value in%%00010         * the current category. This allows to exclude specific bars or even the%%00010         * whole category. Storing by category helps to group warnings also by%%00010         * category. Required for missing values handling.%%00010         */%%00010        missValInCat,%%00010%%00010        /**%%00010         * Array where for each frequency column, which has in all other categories%%00010         * only missing values, we store whether it has a value in the Missing%%00010         * values category. This allows to decide, if we should keep this freq%%00010         * column (if it has a value in MissValCat and the option &quot;include%%00010         * MissValCat&quot; is on) or exclude it. Each item has the fields: col - name of%%00010         * freq column hasValueOnMissValCat - whether the column has a non-missing%%00010         * value in the Missing values category (true/false) Required for missing%%00010         * values handling.%%00010         */%%00010        freqColValueOnMissValCat,%%00010%%00010        /**%%00010         * Array where for each frequency column, which has non-missing value in the%%00010         * Missing values category, we store this value. We need to store it%%00010         * separately to quickly add/remove them to the plot data, when the option%%00010         * &quot;include MissValCat&quot; is getting switched. Each item has the fields: col -%%00010         * name of freq column value - non-missing value, this freq column has in%%00010         * the Missing values category Required for missing values handling.%%00010         */%%00010        missValCatValues,%%00010%%00010        /**%%00010         * Boolean flag - is the Missing values category present in the dataset.%%00010         * Required for missing values handling.%%00010         */%%00010        isMissValCat,%%00010%%00010        /**%%00010         * Map where keys - frequency column names, values - array of those%%00010         * categories for which the bar, specified by the corresponding freq column%%00010         * and the category, was excluded from the view. There excluded bars%%00010         * actually specify those dummy null values, we have to add to the stacked%%00010         * chart to fix it. Choosing freq cols as keys helps adding dummy nulls%%00010         * since the plot dataset has to be key-&gt;values. Required for missing values%%00010         * handling.%%00010         */%%00010        excludeFreqColCatMap,%%00010        showWarnings,%%00010%%00010        /**%%00010         * Function declarations%%00010         */%%00010        drawChart, drawControls, fixStackedData, createHilightBar, removeHilightBar, getClusterToRowMapping,%%00010        subscribeToSelection, publishSelection, processData, getRoundedMaxValue, getSelectedRowIDs,%%00010        handleHighlightClick, sortByClusterName, setCssClasses, setTooltipCssClasses, updateTitles, updateAxisLabels,%%00010        updateLabels, updateChartType, redrawSelection, onSelectionChanged, registerClickHandler, getActiveBars,%%00010        checkClearSelectionButton, selectCorrectBar, processMissingValues, checkMaxSizeXAxis, KeyNameMap,%%00010        handleWarnings, handleMissingValues, getStackedMaxValue;%%00010%%00010    var MISSING_VALUES_LABEL = 'Missing values';%%00010    var MISSING_VALUES_ONLY = 'missingValuesOnly';%%00010    var FREQ_COLUMN_MISSING_VALUES_ONLY = 'freqColumnMissingValuesOnly';%%00010    var CATEGORY_MISSING_VALUES_ONLY = 'categoryMissingValuesOnly';%%00010    var NO_DATA_AVAILABLE = 'noDataAvailable';%%00010%%00010    barChart.init = function (representation, value) {%%00010        _value = value;%%00010        _representation = representation;%%00010        _incomingTable = _representation.inObjects[0].table;%%00010%%00010        if (_representation.options.enableSelection &amp;&amp; _representation.inObjects[0].translator) {%%00010            _translator = _representation.inObjects[0].translator;%%00010            _translator.sourceID = _representation.inObjects[0].uuid;%%00010            _translator.targetIDs = [_representation.tableIds[0]];%%00010            knimeService.registerSelectionTranslator(_translator, _translator.sourceID);%%00010            subscribeToSelection(_value.options.subscribeToSelection);%%00010        }%%00010%%00010        showWarnings = _representation.options.showWarnings;%%00010%%00010        if (_representation.warnMessage &amp;&amp; showWarnings) {%%00010            knimeService.setWarningMessage(_representation.warnMessage);%%00010        }%%00010        if (_representation.options.enableViewControls) {%%00010            drawControls();%%00010        }%%00010        drawChart();%%00010%%00010        _keyNameMap = new KeyNameMap(getClusterToRowMapping());%%00010    };%%00010%%00010%%00010    drawChart = function (redraw) {%%00010%%00010        d3.select('html').style('width', '100%').style('height', '100%');%%00010        d3.select('body').style('width', '100%').style('height', '100%');%%00010%%00010        // Process options%%00010        var optWidth = _representation.options.svg.width;%%00010        var optHeight = _representation.options.svg.height;%%00010%%00010        var optTitle = _value.options.title;%%00010        var optSubtitle = _value.options.subtitle;%%00010%%00010        var sortLabels = _representation.options.sort;%%00010        var optLegend = _representation.options.legend;%%00010        var optTooltips = _representation.options.tooltip;%%00010%%00010        var optOrientation = _value.options.orientation;%%00010%%00010        var optFullscreen = _representation.options.svg.fullscreen &amp;&amp; _representation.runningInView;%%00010        var optEnableSelection = _representation.options.enableSelection;%%00010%%00010        var isTitle = optTitle || optSubtitle;%%00010%%00010        var body = d3.select('body');%%00010%%00010        var width = optWidth + 'px';%%00010        var height = optHeight + 'px';%%00010        if (optFullscreen) {%%00010            knimeService.floatingHeader(isTitle);%%00010            width = '100%';%%00010            height = isTitle ? '100%' : 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010        }%%00010%%00010        var div;%%00010        if (redraw) {%%00010            d3.select('svg').remove();%%00010            div = d3.select('#svgContainer');%%00010        } else {%%00010            layoutContainer = body.append('div')%%00010                .attr('id', 'layoutContainer')%%00010                .attr('class', 'knime-layout-container')%%00010                .style('width', width)%%00010                .style('height', height)%%00010                .style('min-width', MIN_WIDTH + 'px')%%00010                .style('min-height', MIN_HEIGHT + 'px');%%00010%%00010            div = layoutContainer.append('div')%%00010                .attr('id', 'svgContainer')%%00010                .attr('class', 'knime-svg-container')%%00010                .style('min-width', MIN_WIDTH + 'px')%%00010                .style('min-height', MIN_HEIGHT + 'px');%%00010        }%%00010%%00010        var svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');%%00010        div[0][0].appendChild(svg1);%%00010%%00010        svg = d3.select('svg')%%00010            .style('display', 'block')%%00010            .classed('colored', true);%%00010%%00010%%00010        // handle clicks on background to deselect current selection%%00010        if (optEnableSelection) {%%00010            svg.on('click', function () {%%00010                removeHilightBar('', true);%%00010                _value.options.selection = [];%%00010                publishSelection(true);%%00010            });%%00010        }%%00010%%00010%%00010        if (optFullscreen) {%%00010            // Set full screen height/width%%00010            div.style('width', '100%');%%00010            div.style('height', height /* this should be 100% always, but for some reason that doesn't work */);%%00010%%00010            svg.attr('width', '100%');%%00010            svg.attr('height', '100%');%%00010        } else {%%00010            if (optWidth &gt; 0) {%%00010                div.style('width', optWidth + 'px');%%00010                svg.attr('width', optWidth);%%00010                // Looks like the below doesn't work,%%00010                // above does work...%%00010                // chart.width(optWidth);%%00010            }%%00010            if (optHeight &gt; 0) {%%00010                svg.attr('height', optHeight);%%00010                div.style('height', optHeight + 'px');%%00010                // Looks like the below doesn't work,%%00010                // above does work...%%00010                // chart.height(optHeight);%%00010            }%%00010        }%%00010%%00010        if (!redraw) {%%00010            /*%%00010             * Process data%%00010             */%%00010            knimeTable = new kt();%%00010            // Add the data from the input port to the knimeTable.%%00010            var port0dataTable = _representation.inObjects[0].table;%%00010            if (!_representation.isHistogram &amp;&amp; sortLabels) {%%00010                port0dataTable.rows = sortByClusterName(port0dataTable.rows);%%00010            }%%00010            knimeTable.setDataTable(port0dataTable);%%00010%%00010            processData();%%00010        }%%00010%%00010        /*%%00010         * Plot chart%%00010         */%%00010        nv.addGraph(function () {%%00010            if (optOrientation) {%%00010                chart = nv.models.multiBarHorizontalChart();%%00010            } else {%%00010                chart = nv.models.multiBarChart();%%00010                chart.reduceXTicks(Boolean(_representation.isHistogram));%%00010                /* if (_representation.options.rotateLabels) {%%00010                    chart.rotateLabels(_representation.options.rotateLabels);%%00010                } */%%00010            }%%00010%%00010            chart.dispatch.on('renderEnd.css', function () {%%00010                setCssClasses();%%00010            });%%00010            // tooltip is re-created every time therefore we need to assign%%00010            // classes accordingly%%00010            chart.multibar.dispatch.on('elementMouseover.tooltipCss', setTooltipCssClasses);%%00010            chart.multibar.dispatch.on('elementMousemove.tooltipCss', setTooltipCssClasses);%%00010            chart.legend.dispatch.on('legendClick', function () {%%00010                drawChart(true);%%00010                d3.event.stopPropagation();%%00010            });%%00010%%00010            var stacked = _value.options.chartType === 'Stacked';%%00010            if (stacked) {%%00010                fixStackedData(true); // add dummy nulls%%00010            }%%00010            chart.stacked(stacked);%%00010%%00010            chart%%00010                .color(colorRange)%%00010                .duration(0)%%00010                .margin({ right: 20 })%%00010                .groupSpacing(_representation.isHistogram ? 0.01 : 0.1);%%00010%%00010            updateTitles(false);%%00010%%00010            chart.showControls(false); // all the controls moved to settings menu%%00010            chart.showLegend(optLegend);%%00010            chart.tooltip.enabled(typeof optTooltips === 'undefined' || optTooltips);%%00010%%00010            updateAxisLabels(false);%%00010            svg.datum(plotData).transition().duration(0).call(chart);%%00010            nv.utils.windowResize(function () {%%00010                updateAxisLabels(true);%%00010                updateLabels();%%00010                setCssClasses();%%00010                removeHilightBar('', true);%%00010                redrawSelection();%%00010            });%%00010%%00010            // redraws selection%%00010            if (_value.options.selection) {%%00010                redrawSelection();%%00010            }%%00010            return chart;%%00010        });%%00010    };%%00010%%00010    sortByClusterName = function (array) {%%00010        return array.sort(function (a, b) {%%00010            var x = a.data[0];%%00010            var y = b.data[0];%%00010%%00010            // Make sure, that missing values are displayed last%%00010            if (x === null) {%%00010                return 1;%%00010            } else if (y === null) {%%00010                return -1;%%00010            }%%00010%%00010            if (typeof x === 'string') {%%00010                x = (String(x)).toLowerCase();%%00010            }%%00010            if (typeof y === 'string') {%%00010                y = (String(y)).toLowerCase();%%00010            }%%00010            var compare = 0;%%00010            if (x &lt; y) {%%00010                compare = -1;%%00010            } else if (x &gt; y) {%%00010                compare = 1;%%00010            }%%00010            return compare;%%00010        });%%00010    };%%00010%%00010    registerClickHandler = function () {%%00010        d3.selectAll('.nv-bar').on('click', function (event) {%%00010            handleHighlightClick(event);%%00010            d3.event.stopPropagation();%%00010        });%%00010    };%%00010%%00010    getActiveBars = function () {%%00010        var stacked = _value.options.chartType;%%00010        var counter = 0;%%00010        if (stacked === 'Stacked') {%%00010            counter = 1;%%00010        } else {%%00010            for (var j = 0; j &lt; plotData.length; j++) {%%00010                if (plotData[j].disabled !== true) {%%00010                    counter++;%%00010                }%%00010            }%%00010        }%%00010        return counter;%%00010    };%%00010%%00010    redrawSelection = function () {%%00010        var length = _value.options.selection ? _value.options.selection.length : 0;%%00010        for (var i = 0; i &lt; length; i++) {%%00010            createHilightBar(_keyNameMap.getNameFromKey(_value.options.selection[i][0]),%%00010                _value.options.selection[i][1]);%%00010        }%%00010    };%%00010%%00010    subscribeToSelection = function (subscribeBool) {%%00010        if (_representation.options.enableSelection) {%%00010            if (subscribeBool) {%%00010                knimeService.subscribeToSelection(_translator.sourceID, onSelectionChanged);%%00010            } else {%%00010                knimeService.unsubscribeSelection(_translator.sourceID, onSelectionChanged);%%00010            }%%00010        }%%00010    };%%00010%%00010    publishSelection = function (shouldPublish) {%%00010        if (shouldPublish) {%%00010            knimeService.setSelectedRows(_translator.sourceID, getSelectedRowIDs(), onSelectionChanged);%%00010        }%%00010    };%%00010%%00010    checkClearSelectionButton = function () {%%00010        if (_value.options.selection) {%%00010            var button = d3.select('#clearSelectionButton');%%00010            if (button) {%%00010                button.classed('inactive', function () {%%00010                    return !_value.options.selection.length &gt; 0;%%00010                });%%00010            }%%00010        }%%00010    };%%00010%%00010    getSelectedRowIDs = function () {%%00010        if (_value.options.selection) {%%00010            var selectedRowIDs = [];%%00010            for (var i = 0; i &lt; _value.options.selection.length; i++) {%%00010                selectedRowIDs.push(_value.options.selection[i][0]);%%00010            }%%00010            return selectedRowIDs;%%00010        } else {%%00010            return [];%%00010        }%%00010    };%%00010%%00010    selectCorrectBar = function (clusterName) {%%00010        var allBars = d3.selectAll('.knime-x text.knime-tick-label');%%00010        for (var j = 0; j &lt; allBars[0].length; j++) {%%00010            if (d3.select(allBars[0][j]).data()[0] === clusterName) {%%00010                return d3.select(allBars[0][j]);%%00010            }%%00010        }%%00010        // no bar found%%00010        return null;%%00010    };%%00010%%00010    // Removes the clusterName with the given cluster name. If &quot;removeAll&quot; is true all bars are removed%%00010    removeHilightBar = function (clusterName, removeAll) {%%00010        if (_value.options.selection) {%%00010            var selectedEntry, barParent;%%00010            if (removeAll) {%%00010                var length = _value.options.selection.length;%%00010                for (var i = 0; i &lt; length; i++) {%%00010                    selectedEntry = _value.options.selection[i];%%00010                    var bars = d3.selectAll('.hilightBar');%%00010                    barParent = bars.select(function () {%%00010                        return this.parentNode;%%00010                    });%%00010                    barParent.select('text').classed(selectedEntry[1], false);%%00010                    d3.selectAll('.hilightBar').remove();%%00010                }%%00010            } else {%%00010                var barIndex = getSelectedRowIDs().indexOf(_keyNameMap.getKeyFromName(clusterName));%%00010                if (barIndex &gt; -1) {%%00010                    selectedEntry = _value.options.selection[barIndex];%%00010                    var bar = selectCorrectBar(clusterName);%%00010                    if (bar) {%%00010                        barParent = bar.select(function () {%%00010                            return this.parentNode;%%00010                        });%%00010                        barParent.select('text').classed(selectedEntry[1], false);%%00010                        barParent.selectAll('.hilightBar').remove();%%00010                    }%%00010                }%%00010            }%%00010        }%%00010    };%%00010%%00010    // Create a hilight-bar above the cluster with the given name and assigns the given css class to it%%00010    createHilightBar = function (clusterName, selectionClass) {%%00010        var optOrientation = _value.options.orientation;%%00010        var overallBarCount = -1;%%00010        for (var k = 0; k &lt; plotData.length; k++) {%%00010            for (var j = 0; j &lt; plotData[k].values.length; j++) {%%00010                overallBarCount++;%%00010                if (plotData[k].values[j].x === clusterName) {%%00010                    d3.selectAll('.knime-x text').each(function (d, i) {%%00010                        if (i === overallBarCount) {%%00010                            d3.select(this).classed(selectionClass, true);%%00010                            var selectionTitle;%%00010                            if (selectionClass === 'knime-selected') {%%00010                                selectionTitle = 'Selected';%%00010                            } else {%%00010                                selectionTitle = 'Partially selected';%%00010                            }%%00010                            var posX = 0;%%00010                            var posY = 0;%%00010                            var highlightHeight = 0;%%00010                            var highlightWidth = 5;%%00010                            var highlightBarBBox = d3.select('.nv-bar.positive').node().getBBox();%%00010                            var spaceBetweenBarAndChart = -7;%%00010                            if (optOrientation) {%%00010                                posY = -0.5 * (highlightBarBBox.height * getActiveBars());%%00010                                posX = spaceBetweenBarAndChart;%%00010                                highlightHeight = highlightBarBBox.height *%%00010                                    getActiveBars();%%00010                            } else {%%00010                                posX = -0.5 * (highlightBarBBox.width * getActiveBars());%%00010                                highlightWidth = highlightBarBBox.width * getActiveBars();%%00010                                highlightHeight = 5;%%00010                                posY = -spaceBetweenBarAndChart - highlightHeight;%%00010                            }%%00010                            d3.select(this.parentNode).append('rect').classed('hilightBar', true)%%00010                                .classed(selectionClass, true)%%00010                                .attr({ x: posX, y: posY, width: highlightWidth, height: highlightHeight })%%00010                                .style('pointer-events', 'all')%%00010                                .append('title')%%00010                                .classed('knime-tooltip', true)%%00010                                .text(selectionTitle);%%00010                        }%%00010                    });%%00010                    j = plotData[k].values.length;%%00010                    k = plotData.length - 1;%%00010                }%%00010            }%%00010        }%%00010    };%%00010%%00010    getClusterToRowMapping = function () {%%00010        var map = {};%%00010        for (var i = 0; i &lt; _incomingTable.rows.length; i++) {%%00010            if (_incomingTable.rows[i].data[0]) {%%00010                map[_incomingTable.rows[i].data[0]] = _incomingTable.rows[i].rowKey;%%00010            } else {%%00010                map['Missing values'] = _incomingTable.rows[i].rowKey;%%00010            }%%00010        }%%00010        return map;%%00010    };%%00010%%00010    // Helper class to handle conversion from cluster name to row key%%00010    KeyNameMap = function (map) {%%00010        this.map = map;%%00010        this.reverseMap = {};%%00010        for (var key in map) {%%00010            var value = map[key];%%00010            this.reverseMap[value] = key;%%00010        }%%00010    };%%00010%%00010    KeyNameMap.prototype.getKeyFromName = function (name) {%%00010        return this.map[name];%%00010    };%%00010    KeyNameMap.prototype.getNameFromKey = function (key) {%%00010        return this.reverseMap[key];%%00010    };%%00010%%00010    handleHighlightClick = function (event) {%%00010        if (!_value.options.selection) {%%00010            _value.options.selection = [];%%00010        }%%00010        var clusterName = event.x;%%00010        var clusterKey = _keyNameMap.getKeyFromName(clusterName);%%00010        var barIndex = getSelectedRowIDs().indexOf(clusterKey);%%00010        // Deselect already selected bar when clicking again on it%%00010        if (barIndex &gt; -1 &amp;&amp; (d3.event.ctrlKey || d3.event.shiftKey || d3.event.metaKey)) {%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.removeRowsFromSelection(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            removeHilightBar(clusterName, false);%%00010            _value.options.selection.splice(barIndex, 1);%%00010        } else if (!d3.event.ctrlKey &amp;&amp; !d3.event.shiftKey &amp;&amp; !d3.event.metaKey) {%%00010            // Deselect all previously selected bars and select the newly clicked one%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.setSelectedRows(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            removeHilightBar(clusterName, true);%%00010            createHilightBar(clusterName, 'knime-selected');%%00010            _value.options.selection = [];%%00010            _value.options.selection.push([clusterKey, 'knime-selected']);%%00010        } else {%%00010            // Select the clicked bar, as it is either a new selection or a additional selection%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.addRowsToSelection(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            createHilightBar(clusterName, 'knime-selected');%%00010            _value.options.selection.push([clusterKey, 'knime-selected']);%%00010        }%%00010        checkClearSelectionButton();%%00010    };%%00010%%00010    onSelectionChanged = function (data) {%%00010        if (!_value.options.selection) {%%00010            _value.options.selection = [];%%00010        }%%00010        if (data.reevaluate) {%%00010            removeHilightBar('', true);%%00010            var selectedRows = knimeService.getAllRowsForSelection(_translator.sourceID);%%00010            var partiallySelectedRows = knimeService.getAllPartiallySelectedRows(_translator.sourceID);%%00010            var length, selectedRow, partiallySelectedRow;%%00010            for (selectedRow in selectedRows) {%%00010                length = _value.options.selection.length;%%00010                _value.options.selection[length] = [selectedRows[selectedRow], 'knime-selected'];%%00010                createHilightBar(_keyNameMap.getNameFromKey(selectedRows[selectedRow]), 'knime-selected');%%00010            }%%00010            for (partiallySelectedRow in partiallySelectedRows) {%%00010                length = _value.options.selection.length;%%00010                _value.options.selection[length] = [partiallySelectedRows[partiallySelectedRow],%%00010                    'knime-partially-selected'];%%00010                createHilightBar(_keyNameMap.getNameFromKey(partiallySelectedRows[partiallySelectedRow]),%%00010                    'knime-partially-selected');%%00010            }%%00010        } else if (data.changeSet) {%%00010            if (data.changeSet.removed) {%%00010                data.changeSet.removed.forEach(function (rowId) {%%00010                    var clusterName = rowId;%%00010                    var index = getSelectedRowIDs().indexOf(clusterName);%%00010                    if (index &gt; -1) {%%00010                        removeHilightBar(_keyNameMap.getNameFromKey(rowId), false);%%00010                        _value.options.selection.splice(index, 1);%%00010                    }%%00010                });%%00010            }%%00010            if (data.changeSet.partialRemoved) {%%00010                data.changeSet.partialRemoved.forEach(function (rowId) {%%00010                    var clusterName = rowId;%%00010                    var index = getSelectedRowIDs().indexOf(clusterName);%%00010                    if (index &gt; -1) {%%00010                        removeHilightBar(_keyNameMap.getNameFromKey(rowId), false);%%00010                        _value.options.selection.splice(index, 1);%%00010                    }%%00010                });%%00010            }%%00010            if (data.changeSet.added) {%%00010                data.changeSet.added.forEach(function (rowId) {%%00010                    var index = getSelectedRowIDs().indexOf(rowId);%%00010                    if (index === -1) {%%00010                        _value.options.selection.push([rowId, 'knime-selected']);%%00010                        createHilightBar(_keyNameMap.getNameFromKey(rowId), 'knime-selected');%%00010                    }%%00010                });%%00010            }%%00010            if (data.changeSet.partialAdded) {%%00010                data.changeSet.partialAdded.forEach(function (rowId) {%%00010                    var index = getSelectedRowIDs().indexOf(rowId);%%00010                    if (index === -1) {%%00010                        _value.options.selection.push([rowId, 'knime-partially-selected']);%%00010                        createHilightBar(_keyNameMap.getNameFromKey(rowId), 'knime-partially-selected');%%00010                    }%%00010                });%%00010            }%%00010        }%%00010        checkClearSelectionButton();%%00010    };%%00010%%00010    // eslint-disable-next-line complexity%%00010    processData = function () {%%00010        var optMethod = _representation.options.aggr;%%00010        var optFreqCol = _representation.options.freq;%%00010        var optCat = _representation.options.cat;%%00010%%00010        var customColors, colorScale;%%00010        if (_representation.inObjects[1]) {%%00010            // Custom color scale%%00010            var colorTable = new kt();%%00010            colorTable.setDataTable(_representation.inObjects[1]);%%00010            if (colorTable.getColumnTypes()[0] === 'string') {%%00010                customColors = {};%%00010                var colorCol = colorTable.getColumn(0);%%00010                for (var color = 0; color &lt; colorCol.length; color++) {%%00010                    customColors[colorCol[color]] = colorTable.getRowColors()[color];%%00010                }%%00010                colorScale = [];%%00010            }%%00010        }%%00010%%00010        categories = knimeTable.getColumn(optCat);%%00010        var numCat = categories.length;%%00010%%00010        if (optMethod === 'Occurence\u00A0Count') {%%00010            optFreqCol = [knimeTable.getColumnNames()[1]];%%00010        }%%00010%%00010        // Get the frequency columns%%00010        var valCols = [];%%00010        freqCols = [];%%00010%%00010        for (var k = 0; k &lt; optFreqCol.length; k++) {%%00010            var valCol = knimeTable.getColumn(optFreqCol[k]);%%00010            valCols.push(valCol);%%00010            freqCols.push(optFreqCol[k]);%%00010        }%%00010%%00010        plotData = [];%%00010        freqColValueOnMissValCat = [];%%00010        missValInCat = new Array(numCat);%%00010        for (var category = 0; category &lt; numCat; category++) {%%00010            missValInCat[category] = [];%%00010        }%%00010        isMissValCat = false;%%00010        missValCatValues = [];%%00010        var numFreqColsNoMissVal = 0; // number of freq columns which have non-missing values (needed for color scale)%%00010        if (valCols.length &gt; 0) {%%00010            var numDataPoints = valCols[0].length;%%00010            for (var j = 0; j &lt; freqCols.length; j++) {%%00010%%00010                var col = freqCols[j];%%00010                if (optMethod === 'Occurence\u00A0Count' &amp;&amp; !_representation.isHistogram) {%%00010                    col = 'Occurrence Count';%%00010                }%%00010                var values = [];%%00010                var onlyMissValInCats = true; // whether the freq col has only%%00010                // missing values in%%00010                // non-&quot;Missing values&quot;%%00010                // categories%%00010                var hasValueOnMissValCat = false; // whether the freq col has%%00010                // a non-missing value in%%00010                // the Missing values%%00010                // category%%00010%%00010                for (var i = 0; i &lt; numDataPoints; i++) {%%00010                    if (typeof categories !== 'undefined') {%%00010                        var cat = categories[i];%%00010                        var val = valCols[j][i];%%00010%%00010                        if (cat === null) {%%00010                            // Missing values category%%00010                            isMissValCat = true;%%00010                            if (val !== null) {%%00010                                // save the non-missing value for the%%00010                                // corresponding freq col%%00010                                missValCatValues.push({%%00010                                    col: col,%%00010                                    value: val%%00010                                });%%00010                                // this freq col has non-missing value in the%%00010                                // Missing value category%%00010                                hasValueOnMissValCat = true;%%00010                            }%%00010                        } else if (val !== null) {%%00010                            // if both cat and value are not null - normal%%00010                            // case, just add the value%%00010                            onlyMissValInCats = false;%%00010                            values.push({%%00010                                x: cat,%%00010                                y: val%%00010                            });%%00010                        }%%00010%%00010                        if (val === null) {%%00010                            // this freq col has a missing value in the current%%00010                            // category - save this info%%00010                            missValInCat[i].push(col);%%00010                        }%%00010                    }%%00010                }%%00010%%00010                if (onlyMissValInCats) {%%00010                    // The freq col has only missing values in normal categories%%00010                    // -%%00010                    // we save whether it has a non-missing value in the Missing%%00010                    // values category.%%00010                    // Whether this column is going to be displayed in the view%%00010                    // depends on the &quot;includeMissValCat&quot; option.%%00010                    // So we don't add the column to the plot at this moment -%%00010                    // wait for processMissingValues()%%00010                    // Note: a non-missing value (if there is) is stored in%%00010                    // missValCatValues - hence, enough to store only a boolean%%00010                    // flag%%00010                    freqColValueOnMissValCat.push({%%00010                        col: col,%%00010                        hasValueOnMissValCat: hasValueOnMissValCat%%00010                    });%%00010                    if (hasValueOnMissValCat) {%%00010                        // If there is a non-missing value, then the presence of%%00010                        // the column depends on the &quot;includeMissValCat&quot; option,%%00010                        // which can be switched in the view on the fly.%%00010                        // We do not want this switch to influence on the color%%00010                        // scale, so we count it%%00010                        numFreqColsNoMissVal++;%%00010                    }%%00010                } else {%%00010                    // the freq col has non-missing values in normal categories%%00010                    // - add this column to the view%%00010                    var plotStream = {%%00010                        key: col,%%00010                        values: values%%00010                    };%%00010                    plotData.push(plotStream);%%00010%%00010                    if (customColors) {%%00010                        var customColor = customColors[col];%%00010                        if (!customColor) {%%00010                            customColor = '#7C7C7C';%%00010                        }%%00010                        colorScale.push(customColor);%%00010                    }%%00010                    numFreqColsNoMissVal++;%%00010                }%%00010            }%%00010        } else {%%00010            knimeService.setWarningMessage('No numeric values detected');%%00010            return;%%00010        }%%00010%%00010        if (customColors) {%%00010            colorRange = colorScale;%%00010        } else {%%00010            // Default color scale%%00010            if (numFreqColsNoMissVal &gt; 10) {%%00010                colorScale = d3.scale.category20();%%00010            } else {%%00010                colorScale = d3.scale.category10();%%00010            }%%00010            colorRange = colorScale.range();%%00010        }%%00010%%00010        processMissingValues();%%00010    };%%00010%%00010    /**%%00010     * @param {bool} switched - if the chart update was triggered by changing the &quot;include 'Missing values' category&quot;%%00010     * option in the view%%00010     * @returns {undefined}%%00010     */%%00010    processMissingValues = function (switched) {%%00010        // Make a list of freq columns to exclude%%00010        var excludeCols = []; // column names to exclude%%00010        // Go through the list of those freq cols which have only missing values%%00010        // in normal categories%%00010        // and exclude those which either 1) has a missing value in the Missing%%00010        // values category, or%%00010        // 2) has a non-missing value there but the option is set to Don't%%00010        // include missing values%%00010        for (var colI = 0; colI &lt; freqColValueOnMissValCat.length; colI++) {%%00010            var col = freqColValueOnMissValCat[colI];%%00010            if (!col.hasValueOnMissValCat || col.hasValueOnMissValCat &amp;&amp; !_value.options.includeMissValCat) {%%00010                excludeCols.push(col.col);%%00010            }%%00010        }%%00010%%00010        // Make a list of excluded bars per category or whole categories%%00010        var excludeBars = []; // bars (in string representation) to exclude%%00010        var excludeCats = []; // category names to exclude%%00010        var numLeftCols = freqCols.length - excludeCols.length; // how many%%00010        // columns left%%00010        // after%%00010        // excluded ones%%00010        var missValCatBars, // bars for Missing values category we add to the%%00010            data, dataInd;%%00010        // end, so we store them separately%%00010        var excludeWholeMissValCat = false;%%00010        excludeFreqColCatMap = {};%%00010        // We group the warnings by category, so we iterate over categories%%00010        for (var catI = 0; catI &lt; missValInCat.length; catI++) {%%00010            var cat = categories[catI];%%00010            // take only those freq cols which have missing values in the%%00010            // current category and were not whole excluded%%00010            var cols = missValInCat[catI].filter(function (x) {%%00010                return excludeCols.indexOf(x) === -1;%%00010            });%%00010            if (cols.length &gt; 0) {%%00010                if (cols.length === numLeftCols) {%%00010                    // if all the left freq cols have missing values - exclude%%00010                    // the whole category%%00010                    if (cat === null) {%%00010                        excludeWholeMissValCat = true; // Missing values category will be appended to the end%%00010                    } else {%%00010                        excludeCats.push(cat);%%00010                    }%%00010                } else {%%00010                    // build a string of excluded bars (cat - col1, col2 ...)%%00010                    var label = cat === null ? MISSING_VALUES_LABEL : cat;%%00010                    var exclStr = label + ' - ' + cols.join(', ');%%00010                    if (cat === null) {%%00010                        missValCatBars = exclStr; // Missing values category will be appended to the end%%00010                    } else {%%00010                        excludeBars.push(exclStr);%%00010                    }%%00010                    // for normal categories and also for the Missing values%%00010                    // category (if it's included in the view)%%00010                    // we fill the map of excluded bars (grouped by freq cols) -%%00010                    // needed for Stacked plot%%00010                    if (cat !== null || _value.options.includeMissValCat) {%%00010                        cols.forEach(function (col) {%%00010                            if (typeof excludeFreqColCatMap[col] === 'undefined') {%%00010                                excludeFreqColCatMap[col] = [cat];%%00010                            } else {%%00010                                excludeFreqColCatMap[col].push(cat);%%00010                            }%%00010                        });%%00010                    }%%00010                }%%00010            }%%00010        }%%00010        // exclude smth from Missing values category, if it's included in the%%00010        // view%%00010        if (_value.options.includeMissValCat &amp;&amp; _representation.options.reportOnMissingValues) {%%00010            if (excludeWholeMissValCat) {%%00010                excludeCats.push(MISSING_VALUES_LABEL);%%00010            } else if (typeof missValCatBars !== 'undefined') {%%00010                excludeBars.push(missValCatBars);%%00010            }%%00010        }%%00010%%00010        // Add or remove the non-missing values of the Missing values category%%00010        handleMissingValues(excludeCols, switched, data, dataInd);%%00010%%00010        // Set warning messages%%00010        if (!showWarnings) {%%00010            return;%%00010        }%%00010%%00010        handleWarnings(excludeCols, excludeCats, excludeBars);%%00010    };%%00010%%00010    handleMissingValues = function (excludeCols, switched, data, dataInd) {%%00010        for (var i = 0; i &lt; missValCatValues.length; i++) {%%00010            var item = missValCatValues[i];%%00010            if (excludeCols.indexOf(item.col) !== -1 &amp;&amp; !(!_value.options.includeMissValCat &amp;&amp; switched)) {%%00010                /*%%00010                 * Fact that the freq col is in missValCatValues means it has a non-missing value in Missing values%%00010                 * category. If this col was excluded, that means it has only missing values in all other categories AND%%00010                 * we &quot;don't include MissValCat&quot;. In case it's the first time the plot is building, we don't need to do%%00010                 * anything - call continue. But if a user switched the option &quot;includeMissValCat&quot; from 'on' to 'off',%%00010                 * we need to remove the value of MissValCat from the plot further below.%%00010                 */%%00010                continue;%%00010            }%%00010            // find if the plot has already the data (key-&gt;values) for the current freq col == key%%00010            // data object needs to be reset, otherwise missing values will be added to previous data%%00010            data = null;%%00010            for (var j = 0; j &lt; plotData.length; j++) {%%00010                if (plotData[j].key === item.col) {%%00010                    data = plotData[j];%%00010                    dataInd = j;%%00010                    break;%%00010                }%%00010            }%%00010            if (_value.options.includeMissValCat &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                /* if we include Missing values category to the view, we need to add its values */%%00010                var val = {%%00010                    x: MISSING_VALUES_LABEL,%%00010                    y: item.value%%00010                };%%00010                if (typeof data === 'undefined' || data === null) {%%00010                    plotData.push({%%00010                        key: item.col,%%00010                        values: [val]%%00010                    });%%00010                } else {%%00010                    data.values.push(val);%%00010                }%%00010            } else if (switched) {%%00010                // if we don't include Missing values category to the view AND%%00010                // this option was switched in the view, we need to remove its%%00010                // value%%00010                if (typeof data !== 'undefined' &amp;&amp; data !== null) {%%00010                    data.values.pop();%%00010                    if (data.values.length === 0) {%%00010                        plotData.splice(dataInd, 1);%%00010                    }%%00010                }%%00010            }%%00010        }%%00010    };%%00010%%00010    handleWarnings = function (excludeCols, excludeCats, excludeBars) {%%00010        if (plotData.length === 0) {%%00010            // No data available warnings%%00010            var warning = '';%%00010            if (missValCatValues.length !== 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                warning = 'No chart was generated since all frequency columns have only missing values.\n' +%%00010                    'There are values where the category name is missing.\nTo see them switch on the option &quot;Include ' +%%00010                    '\'Missing values\' category&quot; in the view settings.';%%00010            } else {%%00010                warning = 'No chart was generated since all frequency columns have only missing values or empty.\n' +%%00010                    'Re-run the workflow with different data.';%%00010            }%%00010            knimeService.setWarningMessage(warning, NO_DATA_AVAILABLE);%%00010        } else {%%00010            knimeService.clearWarningMessage(NO_DATA_AVAILABLE);%%00010            // All other warnings%%00010            if (excludeCols.length &gt; 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                knimeService.setWarningMessage(%%00010                    'Following frequency columns are not present or contain only missing values and were ' +%%00010                    'excluded from the view:\n    ' + excludeCols.join(', '), FREQ_COLUMN_MISSING_VALUES_ONLY);%%00010            } else {%%00010                knimeService.clearWarningMessage(FREQ_COLUMN_MISSING_VALUES_ONLY);%%00010            }%%00010%%00010            if (excludeCats.length &gt; 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                knimeService.setWarningMessage(%%00010                    'Following categories contain only missing values and were excluded from the view:\n    ' +%%00010                    excludeCats.join(', '), CATEGORY_MISSING_VALUES_ONLY);%%00010            } else {%%00010                knimeService.clearWarningMessage(CATEGORY_MISSING_VALUES_ONLY);%%00010            }%%00010%%00010            if (excludeBars.length &gt; 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                knimeService.setWarningMessage(%%00010                    'Following bars contain only missing values in frequency column and were excluded from the ' +%%00010                    'view:\n    ' + excludeBars.join('\n    '), MISSING_VALUES_ONLY);%%00010            } else {%%00010                knimeService.clearWarningMessage(MISSING_VALUES_ONLY);%%00010            }%%00010        }%%00010    };%%00010%%00010    /**%%00010     * This is a workaround for the stacked plot problem coming from the nvd3%%00010     * library implementation. They do not really support missing values in the%%00010     * Stacked option: (https://github.com/novus/nvd3/issues/1941 - &quot;The%%00010     * solution is to adjust your data before handing it to nvd3.&quot; - nice%%00010     * answer) The implementation uses a simple d3.layout.stack which requires%%00010     * all data have the same length%%00010     * (https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md#_stack)%%00010     * Missing values may lead to different lengths. A workaround here is to add%%00010     * dummy null values in place of excluded bars before drawing to Stacked%%00010     * plot. And remove them before switching to Grouped plot.%%00010     * @param {bool} addDummy - true if dummy is supposed to be added, false otherwise%%00010     * @returns {undefined}%%00010     */%%00010    fixStackedData = function (addDummy) {%%00010        plotData.forEach(function (dataValues) {%%00010            var excludeCats = excludeFreqColCatMap[dataValues.key];%%00010            if (typeof excludeCats === 'undefined') {%%00010                // if this freq col does not have excluded bars at all - nothing%%00010                // to do%%00010                return;%%00010            }%%00010            if (addDummy) {%%00010                // Another implementation thing is that the categories in every%%00010                // freq col must follow the same order.%%00010                // So we cannot simply append dummy nulls to the end.%%00010                // Instead we need to replace the whole &quot;values&quot; array.%%00010                // We go over the categories and add either a real value or a%%00010                // dummy null depending on what's present.%%00010                var i = 0;%%00010                var j = 0;%%00010                var values = dataValues.values;%%00010                var newValues = [];%%00010                categories.forEach(function (cat) {%%00010                    if (cat === null) {%%00010                        return;%%00010                    }%%00010                    if (i &lt; values.length &amp;&amp; values[i].x === cat) {%%00010                        newValues.push(values[i]);%%00010                        i++;%%00010                    } else if (j &lt; excludeCats.length &amp;&amp; excludeCats[j] === cat) {%%00010                        newValues.push({%%00010                            x: cat,%%00010                            y: null%%00010                        });%%00010                        j++;%%00010                    }%%00010                });%%00010                if (i &lt; values.length &amp;&amp; values[i].x === MISSING_VALUES_LABEL) {%%00010                    newValues.push(values[i]);%%00010                } else if (j &lt; excludeCats.length &amp;&amp; excludeCats[j] === null) {%%00010                    newValues.push({%%00010                        x: MISSING_VALUES_LABEL,%%00010                        y: null%%00010                    });%%00010                }%%00010                dataValues.values = newValues;%%00010            } else {%%00010                // remove dummy null values (basically any null values as there%%00010                // can be no other nulls)%%00010                dataValues.values = dataValues.values.filter(function (value) {%%00010                    return value.y !== null;%%00010                });%%00010            }%%00010        });%%00010    };%%00010%%00010    updateTitles = function (updateChart) {%%00010        if (chart) {%%00010            var curTitle = d3.select('#title');%%00010            var curSubtitle = d3.select('#subtitle');%%00010            var chartNeedsUpdating = curTitle.empty() !== !_value.options.title ||%%00010                curSubtitle.empty() !== !_value.options.subtitle;%%00010            if (!_value.options.title) {%%00010                curTitle.remove();%%00010            }%%00010            if (_value.options.title) {%%00010                if (curTitle.empty()) {%%00010                    svg.append('text')%%00010                        .attr('x', 20)%%00010                        .attr('y', 30)%%00010                        .attr('id', 'title')%%00010                        .attr('class', 'knime-title')%%00010                        .text(_value.options.title);%%00010                } else {%%00010                    curTitle.text(_value.options.title);%%00010                }%%00010            }%%00010            if (!_value.options.subtitle) {%%00010                curSubtitle.remove();%%00010            }%%00010            if (_value.options.subtitle) {%%00010                if (curSubtitle.empty()) {%%00010                    svg.append('text')%%00010                        .attr('x', 20)%%00010                        .attr('y', _value.options.title ? 46 : 20)%%00010                        .attr('id', 'subtitle')%%00010                        .attr('class', 'knime-subtitle')%%00010                        .text(_value.options.subtitle);%%00010                } else {%%00010                    curSubtitle.text(_value.options.subtitle).attr('y', _value.options.title ? 46 : 20);%%00010                }%%00010            }%%00010%%00010            var topMargin = 10;%%00010            topMargin += _value.options.title ? 10 : 0;%%00010            topMargin += _value.options.subtitle ? 8 : 0;%%00010            if (_representation.options.legend) {%%00010                chart.legend.margin({%%00010                    top: topMargin,%%00010                    bottom: topMargin%%00010                });%%00010            } else {%%00010                chart.margin({%%00010                    top: topMargin * 2%%00010                });%%00010            }%%00010%%00010            var isTitle = _value.options.title || _value.options.subtitle;%%00010            knimeService.floatingHeader(isTitle);%%00010%%00010            if (updateChart &amp;&amp; chartNeedsUpdating) {%%00010                if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010                    var height = isTitle ? '100%' : 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010                    layoutContainer.style('height', height)%%00010                        // two rows below force to invalidate the container which%%00010                        // solves a weird problem with vertical scroll bar in IE%%00010                        .style('display', 'none')%%00010                        .style('display', 'block');%%00010                    d3.select('#svgContainer').style('height', height);%%00010                }%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010%%00010    /**%%00010     * Updates the axis labels after they have been wrapped. And add a title to%%00010     * show the full name. Additionally adjust the length of the maximum and%%00010     * minimum value on the y-axis.%%00010     * @returns {undefined}%%00010     */%%00010    updateLabels = function () {%%00010        var optShowMaximum = _value.options.showMaximum;%%00010        if (typeof optShowMaximum === 'undefined') {%%00010            optShowMaximum = _representation.options.showMaximum;%%00010        }%%00010        var optOrientation = _value.options.orientation;%%00010        var texts = svg.select('.knime-x').selectAll('text');%%00010        texts.each(function (d, i) {%%00010            if (typeof wrappedPlotData[0].values[i] !== 'undefined') {%%00010                var me = d3.select(this);%%00010                me.text(wrappedPlotData[0].values[i].x);%%00010                me.append('title').classed('knime-tooltip', true);%%00010            }%%00010        });%%00010        var stacked = _value.options.chartType;%%00010        var extremValues = [];%%00010        if (stacked === 'Grouped') {%%00010            extremValues = getRoundedMaxValue(false);%%00010        } else {%%00010            extremValues = getRoundedMaxValue(true);%%00010        }%%00010        var minValue = extremValues[0];%%00010        var maxValue = extremValues[1];%%00010%%00010        var tickAmount = chart.yAxis.ticks();%%00010        if (tickAmount &lt; 2) {%%00010            tickAmount = 2;%%00010        }%%00010%%00010        var textsYMin, textsYMax;%%00010        if (optShowMaximum) {%%00010            if (optOrientation) {%%00010                textsYMin = svg.select('.nv-axisMin-x').selectAll('text');%%00010                textsYMax = svg.select('.nv-axisMax-x').selectAll('text');%%00010            } else {%%00010                textsYMin = svg.select('.nv-axisMin-y').selectAll('text');%%00010                textsYMax = svg.select('.nv-axisMax-y').selectAll('text');%%00010            }%%00010            textsYMin.text(minValue);%%00010            textsYMax.text(maxValue);%%00010        }%%00010%%00010        var labelTooltip = texts.selectAll('.knime-tooltip');%%00010        var counter = 0;%%00010        labelTooltip.each(function () {%%00010            var me = d3.select(this);%%00010            if (typeof plotData[0].values[counter] !== 'undefined') {%%00010                me.text(plotData[0].values[counter].x);%%00010            }%%00010            counter++;%%00010        });%%00010%%00010        // Create titles for the Axis-Tooltips%%00010        svg.select('.knime-y text.knime-axis-label').append('title').classed('knime-tooltip', true).text(%%00010            _value.options.freqLabel);%%00010        svg.select('.knime-x text.knime-axis-label').append('title').classed('knime-tooltip', true).text(%%00010            _value.options.catLabel);%%00010    };%%00010%%00010    getRoundedMaxValue = function (isStacked) {%%00010        var maxValue = 0;%%00010        var minValue = 0;%%00010        var considerNegativeList = false;%%00010        if (isStacked) {%%00010            var stackedExtremValues = getStackedMaxValue (considerNegativeList, maxValue, minValue);%%00010            maxValue = stackedExtremValues.maxValue;%%00010            minValue = stackedExtremValues.minValue;%%00010        } else {%%00010            for (var i = 0; i &lt; plotData.length; i++) {%%00010                if (plotData[i].disabled !== true) {%%00010                    var tempMaxValue = Math.max(d3.max(plotData[i].values, function (d) {%%00010                        return parseFloat(d.y);%%00010                    }), 0);%%00010                    if (tempMaxValue &gt; maxValue) {%%00010                        maxValue = tempMaxValue;%%00010                    }%%00010                    var tempMinValue = Math.min(d3.min(plotData[i].values, function (d) {%%00010                        return parseFloat(d.y);%%00010                    }), 0);%%00010                    if (tempMinValue &lt; minValue) {%%00010                        minValue = tempMinValue;%%00010                    }%%00010                }%%00010            }%%00010        }%%00010%%00010        var tickAmount = chart.yAxis.ticks();%%00010        if (tickAmount &lt; 2) {%%00010            tickAmount = 2;%%00010        }%%00010%%00010        var scale = d3.scale.linear().domain([minValue, maxValue]);%%00010        var ticks = scale.ticks(tickAmount);%%00010        var precision = 1;%%00010        for (var tickI = 0; tickI &lt; ticks.length; tickI++) {%%00010            if (ticks[tickI] !== 0) {%%00010                var curTick = ticks[tickI];%%00010                if (curTick.toString().indexOf('.') &gt;= 0) {%%00010                    // +1 because the precision of the maximum should be one%%00010                    // decimal more then the normal ticks%%00010                    precision = Math.max(curTick.toString().split('.')[1].length + 1, precision);%%00010                } else if (curTick.toString().indexOf('e') &gt;= 0) {%%00010                    precision = Math.max(Math.abs(parseFloat(curTick.toString().split('e')[1])), precision);%%00010                }%%00010            }%%00010        }%%00010%%00010        var roundedMaxValue = Math.ceil(parseFloat(maxValue) * Math.pow(10, precision)) / Math.pow(10, precision);%%00010        var roundedMinValue = Math.floor(parseFloat(minValue) * Math.pow(10, precision)) / Math.pow(10, precision);%%00010        return [roundedMinValue, roundedMaxValue];%%00010    };%%00010%%00010    getStackedMaxValue = function (considerNegativeList, maxValue, minValue) {%%00010        var sumListPositive = [];%%00010        var sumListNegative = [];%%00010        for (var dataI = 0; dataI &lt; plotData.length; dataI++) {%%00010            for (var valueI = 0; valueI &lt; plotData[dataI].values.length; valueI++) {%%00010                if (sumListPositive.length &lt; plotData[dataI].values.length) {%%00010                    sumListPositive.push(0);%%00010                    sumListNegative.push(0);%%00010                }%%00010                if (plotData[dataI].disabled !== true) {%%00010                    if (plotData[dataI].values[valueI].y &gt; 0) {%%00010                        sumListPositive[valueI] += plotData[dataI].values[valueI].y;%%00010                    } else {%%00010                        sumListNegative[valueI] += plotData[dataI].values[valueI].y;%%00010                        considerNegativeList = true;%%00010                    }%%00010                }%%00010            }%%00010        }%%00010        maxValue = d3.max(sumListPositive);%%00010        if (considerNegativeList) {%%00010            minValue = d3.min(sumListNegative);%%00010        }%%00010        return { minValue: minValue, maxValue: maxValue };%%00010    };%%00010%%00010    /**%%00010     * Find the max size of one element on the y-axis to see how much space is needed. To find out the max size, a%%00010     * temp-text object is created and measured. Afterwards that temp-text is deleted (is not visible in the view).%%00010     * @param {bool} optShowMaximum%%00010     * @returns {object}%%00010     */%%00010    function checkMaxSizeYAxis(optShowMaximum) {%%00010        var maxValue = 0;%%00010        var minValue = 0;%%00010        var extremValues = [];%%00010        var stacked = _value.options.chartType;%%00010        if (stacked === 'Grouped') {%%00010            extremValues = getRoundedMaxValue(false);%%00010        } else {%%00010            extremValues = getRoundedMaxValue(true);%%00010        }%%00010        minValue = extremValues[0];%%00010        maxValue = extremValues[1];%%00010%%00010        var svgHeight = parseInt(d3.select('svg').style('height'), 10);%%00010        var svgWidth = parseInt(d3.select('svg').style('width'), 10);%%00010%%00010        // Calculate values of the y-axis to get an impression about the precision.%%00010        var scale = d3.scale.linear().domain([minValue, maxValue]).range(%%00010            [0, _representation.options.svg.height]);%%00010        var defaultTicksAmount = 4;%%00010        var ticks = scale.ticks(defaultTicksAmount);%%00010        if (optShowMaximum) {%%00010            if (maxValue.toString().indexOf('.') &gt; 0) {%%00010                if (ticks[ticks.length - 1].toString().indexOf('.') &gt; 0) {%%00010                    var decimalString = ticks[ticks.length - 1].toString().split('.')[1];%%00010                    ticks.push(parseFloat(maxValue.toFixed(decimalString.length) + 1));%%00010                } else {%%00010                    ticks.push(parseFloat(maxValue.toFixed(0)));%%00010                }%%00010            } else {%%00010                ticks.push(maxValue);%%00010            }%%00010            if (minValue &lt; 0 &amp;&amp; minValue.toString().indexOf('e') &lt; 0) {%%00010                if (ticks[0].toString().split('.')[1]) {%%00010                    ticks.push(minValue.toFixed(ticks[0].toString().split('.')[1].length - 1));%%00010                } else {%%00010                    ticks.push(minValue.toFixed(1));%%00010                }%%00010            } else if (minValue &lt; 0) {%%00010                ticks.push(minValue);%%00010            }%%00010        }%%00010        var configObject = {%%00010            container: document.querySelector('svg'),%%00010            tempContainerClasses: 'knime-axis',%%00010            maxWidth: svgWidth,%%00010            maxHeight: svgHeight%%00010        };%%00010%%00010        var results = knimeService.measureAndTruncate(ticks, configObject);%%00010%%00010        // Return the format to show the result and the space needed to the left border.%%00010        return results;%%00010    }%%00010%%00010    /**%%00010     * Find the max size of the biggest element on the x-Axis. Move the Graph so that this object is completely visible.%%00010     * @param {array} dataValues - the data array of which the chart should be created for%%00010     * @param {bool} staggerLabels - true if x axis labels are staggered (allows more space), false otherwise%%00010     * @returns {object}%%00010     */%%00010    checkMaxSizeXAxis = function (dataValues, staggerLabels) {%%00010        var maxWidth, barWidth, nValue, group, groupValue;%%00010        var optOrientation = _value.options.orientation;%%00010        // var svgHeight = parseInt(d3.select('svg').style('height'));%%00010        var svgWidth = parseInt(d3.select('svg').style('width'), 10);%%00010        var amountOfBars = dataValues[0].values.length;%%00010        var amountOfDimensions = dataValues.length;%%00010%%00010        var spaceBetweenBars = _representation.isHistogram ? 0 : 40;%%00010        if (optOrientation) {%%00010            maxWidth = svgWidth / 2;%%00010        } else {%%00010            if (d3.select('.nv-groups').node() === null) {%%00010                barWidth = svgWidth / amountOfBars - spaceBetweenBars;%%00010            } else {%%00010                barWidth = d3.select('.nv-groups').select('rect')[0][0].width.baseVal.value * amountOfDimensions;%%00010            }%%00010            if (staggerLabels) {%%00010                maxWidth = barWidth * 2;%%00010            } else {%%00010                maxWidth = barWidth;%%00010            }%%00010        }%%00010%%00010        var configObject = {%%00010            container: document.querySelector('svg'),%%00010            tempContainerClasses: 'knime-axis',%%00010            /* maxHeight: svgHeight / amountOfBars, */%%00010            minimalChars: 1%%00010        };%%00010        if (!_representation.isHistogram) {%%00010            configObject.maxWidth = maxWidth;%%00010        }%%00010        var xValues = [];%%00010        for (nValue in dataValues[0].values) {%%00010            xValues.push(dataValues[0].values[nValue].x);%%00010        }%%00010%%00010        var results = knimeService.measureAndTruncate(xValues, configObject);%%00010%%00010        var xExtremValues = [];%%00010        xExtremValues.push(dataValues[0].values[0].x);%%00010        xExtremValues.push(dataValues[0].values[dataValues[0].values.length - 1].x);%%00010%%00010        if (staggerLabels) {%%00010            if (!optOrientation) {%%00010                configObject.maxWidth = svgWidth / amountOfBars - spaceBetweenBars;%%00010            }%%00010        }%%00010        var extremResults = knimeService.measureAndTruncate(xExtremValues, configObject);%%00010%%00010        // Update the cloned data array to contain the wrapped labels%%00010        for (group in dataValues) {%%00010            for (groupValue in dataValues[group].values) {%%00010                if (groupValue === 0) {%%00010                    wrappedPlotData[group].values[groupValue].x = extremResults.values[0].truncated;%%00010                } else if (groupValue === dataValues[group].values.length - 1) {%%00010                    wrappedPlotData[group].values[groupValue].x = extremResults.values[1].truncated;%%00010                } else {%%00010                    var val = results.values[parseInt(groupValue, 10)];%%00010                    wrappedPlotData[group].values[groupValue].x = typeof val === 'undefined' ? null : val.truncated;%%00010                }%%00010            }%%00010        }%%00010        return results;%%00010    };%%00010%%00010    // eslint-disable-next-line complexity%%00010    updateAxisLabels = function (updateChart) {%%00010%%00010        if (chart) {%%00010            var optOrientation = _value.options.orientation;%%00010            var optStaggerLabels = _value.options.staggerLabels;%%00010            var stacked = _value.options.chartType;%%00010            var optShowMaximum = _value.options.showMaximum;%%00010            var curCatAxisLabel, curFreqAxisLabel;%%00010            var curCatAxisLabelElement = d3.select('.nv-x.nv-axis .nv-axis-label');%%00010            var curFreqAxisLabelElement = d3.select('.nv-y.nv-axis .nv-axis-label');%%00010            var freqLabel = _value.options.freqLabel;%%00010            var catLabel = _value.options.catLabel;%%00010            var svgHeight = parseInt(d3.select('svg').style('height'), 10);%%00010            var svgWidth = parseInt(d3.select('svg').style('width'), 10);%%00010%%00010            if (typeof optShowMaximum === 'undefined') {%%00010                optShowMaximum = _representation.options.showMaximum;%%00010            }%%00010%%00010            wrappedPlotData = JSON.parse(JSON.stringify(plotData));%%00010%%00010            if (!curCatAxisLabelElement.empty()) {%%00010                curCatAxisLabel = curCatAxisLabelElement.text();%%00010            }%%00010%%00010            if (!curFreqAxisLabelElement.empty()) {%%00010                curFreqAxisLabel = curCatAxisLabelElement.text();%%00010            }%%00010%%00010            var chartNeedsUpdating = curCatAxisLabel !== _value.options.catLabel ||%%00010                curFreqAxisLabel !== _value.options.freqLabel;%%00010            if (!chartNeedsUpdating) {%%00010                return;%%00010            }%%00010%%00010            var configObject = {%%00010                container: document.querySelector('svg'),%%00010                tempContainerClasses: 'knime-axis',%%00010                maxWidth: svgWidth / 2,%%00010                maxHeight: svgHeight / 2,%%00010                minimalChars: 1%%00010            };%%00010            configObject.tempContainerAttributes = optOrientation ? { transform: 'rotate(-90)' } : '';%%00010            var catLabelSize = knimeService.measureAndTruncate(catLabel ? [catLabel] : [''], configObject);%%00010            configObject.tempContainerAttributes.transform = optOrientation ? '' : { transform: 'rotate(-90)' };%%00010            var freqLabelSize = knimeService.measureAndTruncate(freqLabel ? [freqLabel] : [''], configObject);%%00010%%00010            var maxSizeYAxis = checkMaxSizeYAxis(optShowMaximum);%%00010            var maxSizeXAxis = checkMaxSizeXAxis(wrappedPlotData, optStaggerLabels);%%00010            var svgSize = optOrientation ? parseInt(d3.select('svg').style('width'), 10)%%00010                : parseInt(d3.select('svg').style('height'), 10);%%00010%%00010            freqLabel = freqLabelSize.values[0].truncated;%%00010            catLabel = catLabelSize.values[0].truncated;%%00010%%00010            // space between two labels%%00010            var distanceBetweenLabels = 150;%%00010            var tickAmount = 0;%%00010            var rightMargin = 0;%%00010%%00010            if (optOrientation) {%%00010                tickAmount = parseInt((svgSize - maxSizeXAxis.max.maxWidth) /%%00010                    (maxSizeYAxis.max.maxWidth + distanceBetweenLabels), 10);%%00010                if (optShowMaximum) {%%00010                    // extend the border of the svg to be able to see the complete maximum label%%00010                    // factor 0.6 is chosen to give the label a little space to the border%%00010                    rightMargin = 0.6 * maxSizeYAxis.max.maxWidth;%%00010                }%%00010            } else {%%00010                tickAmount = parseInt((svgSize - maxSizeYAxis.max.maxHeight) /%%00010                    (maxSizeYAxis.max.maxHeight + distanceBetweenLabels), 10);%%00010            }%%00010%%00010            // nvd3 sets the cat label 55 pixel away from the axis. As with changing font size this%%00010            // is not enough, it is easier to calculate it ourselves%%00010            var spacingCatLabel = 25;%%00010%%00010            // nvd3 sets the freq label 20 pixel away from the axis. As with changing font size this%%00010            // is not enough, it is easier to calculate it ourselves%%00010            var spacingFreqLabel = 20;%%00010%%00010            // add some empty space, so that two labels are not to close together%%00010            var additionalEmptySpace = 15;%%00010%%00010            // add some empty space when labels are staggered. Normal empty space is too much.%%00010            var staggerLabelsAdditionalSpace = 5;%%00010%%00010            // space to the y-axis assured by nvd3%%00010            var paddingAmount = 15;%%00010%%00010            var xLabelDistance = 0;%%00010            var yLabelDistance = 0;%%00010            if (optOrientation) {%%00010                // -spacingCatLabel: reset the label to the position of the axis%%00010                // + maxSizeAxis: the calculated space needed by the label itself%%00010                // + additionalEmptySpace: add some empty space%%00010                xLabelDistance = -spacingCatLabel + maxSizeXAxis.max.maxWidth  + additionalEmptySpace;%%00010                yLabelDistance = -spacingFreqLabel + maxSizeYAxis.max.maxHeight;%%00010            } else {%%00010                if (optStaggerLabels) {%%00010                    // -spacingCatLabel: reset the label to the position of the axis%%00010                    // maxSizeAxis * 2: the calculated space needed by the label itself. When staggered there are 2%%00010                    // lines%%00010                    xLabelDistance = -spacingCatLabel + maxSizeXAxis.max.maxHeight * 2  + additionalEmptySpace;%%00010                } else {%%00010                    xLabelDistance = -spacingCatLabel + maxSizeXAxis.max.maxHeight + additionalEmptySpace;%%00010                }%%00010                yLabelDistance = maxSizeYAxis.max.maxWidth - spacingCatLabel + additionalEmptySpace;%%00010            }%%00010%%00010            chart.xAxis.axisLabel(catLabel)%%00010                .axisLabelDistance(xLabelDistance)%%00010                .tickPadding(paddingAmount)%%00010                .showMaxMin(false);%%00010%%00010            chart.yAxis.axisLabel(freqLabel)%%00010                .axisLabelDistance(yLabelDistance)%%00010                .showMaxMin(optShowMaximum)%%00010                .ticks(tickAmount)%%00010                .tickFormat(d3.format('~.g'));%%00010%%00010            var extremValues = [];%%00010            if (stacked === 'Grouped') {%%00010                extremValues = getRoundedMaxValue(false);%%00010            } else {%%00010                extremValues = getRoundedMaxValue(true);%%00010            }%%00010            chart.yDomain([extremValues[0], extremValues[1]]);%%00010%%00010            // calculate the space the charts needs below the actual chart%%00010            // its calculated from the height of the text element,%%00010            // the height of the axis label and some additional space%%00010            var bottomMargin = optOrientation%%00010                ? maxSizeYAxis.max.maxHeight + freqLabelSize.max.maxHeight + additionalEmptySpace%%00010                : maxSizeXAxis.max.maxHeight + catLabelSize.max.maxHeight + additionalEmptySpace;%%00010            var leftMargin = optOrientation%%00010                ? maxSizeXAxis.max.maxWidth + catLabelSize.max.maxWidth + additionalEmptySpace + paddingAmount%%00010                : maxSizeYAxis.max.maxWidth + freqLabelSize.max.maxWidth + additionalEmptySpace;%%00010%%00010            if (!_value.options.catLabel) {%%00010                bottomMargin = optOrientation ? bottomMargin%%00010                    : maxSizeXAxis.max.maxHeight + additionalEmptySpace;%%00010                leftMargin = optOrientation ? leftMargin%%00010                    : maxSizeYAxis.max.maxWidth + freqLabelSize.max.maxWidth + additionalEmptySpace;%%00010            }%%00010            if (!_value.options.freqLabel) {%%00010                bottomMargin = optOrientation ? maxSizeXAxis.max.maxHeight + additionalEmptySpace : bottomMargin;%%00010                leftMargin = optOrientation ? leftMargin + paddingAmount%%00010                    : maxSizeYAxis.max.maxWidth + additionalEmptySpace;%%00010            }%%00010            if (!optOrientation) {%%00010                chart.staggerLabels(optStaggerLabels);%%00010                if (optStaggerLabels) {%%00010                    bottomMargin += _value.options.catLabel ? maxSizeXAxis.max.maxHeight  + staggerLabelsAdditionalSpace%%00010                        : maxSizeXAxis.max.maxHeight / 2 + paddingAmount;%%00010                }%%00010            }%%00010            chart.margin({%%00010                left: leftMargin,%%00010                bottom: bottomMargin,%%00010                right: rightMargin%%00010            });%%00010%%00010            if (updateChart) {%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010%%00010    updateChartType = function () {%%00010        if (this.value !== _value.options.chartType) {%%00010            _value.options.chartType = this.value;%%00010            var stacked = this.value === 'Stacked';%%00010            fixStackedData(stacked);%%00010            chart.stacked(stacked);%%00010            drawChart(true);%%00010        }%%00010    };%%00010    // eslint-disable-next-line complexity%%00010    drawControls = function () {%%00010        if (!knimeService) {%%00010            return;%%00010        }%%00010%%00010        if (_representation.options.displayFullscreenButton) {%%00010            knimeService.allowFullscreen();%%00010        }%%00010        if (!_representation.options.enableViewControls) {%%00010            return;%%00010        }%%00010%%00010        var titleEdit = _representation.options.enableTitleEdit;%%00010        var subtitleEdit = _representation.options.enableSubtitleEdit;%%00010        var axisEdit = _representation.options.enableAxisEdit;%%00010        var chartTypeEdit = _representation.options.enableStackedEdit;%%00010        var orientationEdit = _representation.options.enableHorizontalToggle;%%00010        var staggerLabels = _representation.options.enableStaggerToggle;%%00010        var switchMissValCat = _representation.options.enableSwitchMissValCat;%%00010        var showMaximum = _representation.options.enableMaximumValue;%%00010        var enableSelection = _representation.options.enableSelection;%%00010        var displayClearButton = _representation.options.displayClearSelectionButton;%%00010%%00010        if (titleEdit) {%%00010            var chartTitleText = knimeService.createMenuTextField('chartTitleText', _value.options.title,%%00010                function () {%%00010                    if (_value.options.title !== this.value) {%%00010                        _value.options.title = this.value;%%00010                        updateTitles(true);%%00010                    }%%00010                }, true);%%00010            knimeService.addMenuItem('Chart Title:', 'header', chartTitleText);%%00010        }%%00010        if (subtitleEdit) {%%00010            var chartSubtitleText = knimeService.createMenuTextField('chartSubtitleText', _value.options.subtitle,%%00010                function () {%%00010                    if (_value.options.subtitle !== this.value) {%%00010                        _value.options.subtitle = this.value;%%00010                        updateTitles(true);%%00010                    }%%00010                }, true);%%00010            knimeService.addMenuItem('Chart Subtitle:', 'header', chartSubtitleText, null, knimeService.SMALL_ICON);%%00010        }%%00010        if ((titleEdit  || subtitleEdit) &amp;&amp; (axisEdit || orientationEdit || staggerLabels)) {%%00010            knimeService.addMenuDivider();%%00010        }%%00010%%00010        if (axisEdit) {%%00010            var catAxisText = knimeService.createMenuTextField('catAxisText', _value.options.catLabel, function () {%%00010                _value.options.catLabel = this.value;%%00010                updateAxisLabels(true);%%00010            }, true);%%00010            knimeService.addMenuItem('Category axis label:', 'ellipsis-h', catAxisText);%%00010%%00010            var freqAxisText = knimeService.createMenuTextField('freqAxisText', _value.options.freqLabel, function () {%%00010                _value.options.freqLabel = this.value;%%00010                updateAxisLabels(true);%%00010            }, true);%%00010            knimeService.addMenuItem('Frequency axis label:', 'ellipsis-v', freqAxisText);%%00010%%00010            if (switchMissValCat || orientationEdit || staggerLabels || chartTypeEdit) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (switchMissValCat &amp;&amp; isMissValCat &amp;&amp; _representation.options.reportOnMissingValues) {%%00010            var switchMissValCatCbx =%%00010                knimeService.createMenuCheckbox('switchMissValCatCbx', _value.options.includeMissValCat, function () {%%00010                    if (_value.options.includeMissValCat !== this.checked) {%%00010                        _value.options.includeMissValCat = this.checked;%%00010                        var stacked = _value.options.chartType === 'Stacked';%%00010                        if (stacked) {%%00010                            fixStackedData(false);%%00010                        }%%00010                        processMissingValues(true);%%00010                        if (stacked) {%%00010                            fixStackedData(true);%%00010                        }%%00010                        chart.update();%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Include \'Missing values\' category: ', 'question', switchMissValCatCbx);%%00010%%00010            if (orientationEdit || staggerLabels || chartTypeEdit) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (chartTypeEdit) {%%00010            var groupedRadio = knimeService.createMenuRadioButton('groupedRadio', 'chartType', 'Grouped',%%00010                updateChartType);%%00010            groupedRadio.checked = _value.options.chartType === groupedRadio.value;%%00010            knimeService.addMenuItem('Grouped:', 'align-left fa-rotate-270', groupedRadio);%%00010%%00010            var stackedRadio = knimeService.createMenuRadioButton('stackedRadio', 'chartType', 'Stacked',%%00010                updateChartType);%%00010            stackedRadio.checked = _value.options.chartType === stackedRadio.value;%%00010            knimeService.addMenuItem('Stacked:', 'tasks fa-rotate-270', stackedRadio);%%00010%%00010            if (orientationEdit || staggerLabels) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (orientationEdit) {%%00010            var orientationCbx = knimeService.createMenuCheckbox('orientationCbx', _value.options.orientation,%%00010                function () {%%00010                    if (_value.options.orientation !== this.checked) {%%00010                        _value.options.orientation = this.checked;%%00010                        d3.select('#staggerCbx').property('disabled', this.checked);%%00010                        drawChart(true);%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Plot horizontal bar chart:', 'align-left', orientationCbx);%%00010        }%%00010%%00010        if (staggerLabels) {%%00010            var staggerCbx = knimeService.createMenuCheckbox('staggerCbx', _value.options.staggerLabels, function () {%%00010                if (_value.options.staggerLabels !== this.checked) {%%00010                    _value.options.staggerLabels = this.checked;%%00010                    drawChart(true);%%00010                }%%00010            });%%00010            staggerCbx.disabled = _value.options.orientation;%%00010            knimeService.addMenuItem('Stagger labels:', 'map-o', staggerCbx);%%00010        }%%00010%%00010        if (showMaximum) {%%00010            var displayMaximumCbx = knimeService.createMenuCheckbox('displayMaximumCbx', _value.options.showMaximum,%%00010                function () {%%00010                    if (_value.options.showMaximum !== this.checked) {%%00010                        _value.options.showMaximum = this.checked;%%00010                        drawChart(true);%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Display maximum value:', 'arrows-v', displayMaximumCbx);%%00010        }%%00010%%00010        if (enableSelection) {%%00010            knimeService.addMenuDivider();%%00010            var subscribeToSelectionIcon = knimeService.createStackedIcon('check-square-o', 'angle-double-right',%%00010                'faded right sm', 'left bold');%%00010            var subscribeToSelectionMenu = knimeService.createMenuCheckbox('subscribeToSelection',%%00010                _value.options.subscribeToSelection, function () {%%00010                    if (_value.options.subscribeToSelection !== this.checked) {%%00010                        _value.options.subscribeToSelection = this.checked;%%00010                        subscribeToSelection(_value.options.subscribeToSelection);%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Subscribe to selection:', subscribeToSelectionIcon, subscribeToSelectionMenu);%%00010%%00010            var publishSelectionIcon = knimeService.createStackedIcon('check-square-o', 'angle-right', 'faded left sm',%%00010                'right bold');%%00010            var publishSelectionMenu = knimeService.createMenuCheckbox('publishSelection',%%00010                _value.options.publishSelection, function () {%%00010                    if (_value.options.publishSelection !== this.checked) {%%00010                        _value.options.publishSelection = this.checked;%%00010                        publishSelection(this.checked);%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Publish selection:', publishSelectionIcon, publishSelectionMenu);%%00010        }%%00010%%00010        if (displayClearButton &amp;&amp;  _representation.options.enableSelection) {%%00010            knimeService.addButton('clearSelectionButton', 'minus-square-o', 'Clear selection', function () {%%00010                d3.selectAll('.row').classed({ selected: false, 'knime-selected': false, unselected: false });%%00010                removeHilightBar('', true);%%00010                _value.options.selection = [];%%00010                publishSelection(true);%%00010            });%%00010            d3.select('#clearSelectionButton').classed('inactive', true);%%00010        }%%00010    };%%00010%%00010    setCssClasses = function () {%%00010        // axis%%00010        var axis = d3.selectAll('.nv-axis')%%00010            .classed('knime-axis', true);%%00010        d3.selectAll('.nv-x')%%00010            .classed('knime-x', true);%%00010        d3.selectAll('.nv-y')%%00010            .classed('knime-y', true);%%00010        d3.selectAll('.nv-axislabel')%%00010            .classed('knime-axis-label', true);%%00010        axis.selectAll('path.domain')%%00010            .classed('knime-axis-line', true);%%00010        var axisMaxMin = d3.selectAll('.nv-axisMaxMin')%%00010            .classed('knime-axis-max-min', true);%%00010        axisMaxMin.selectAll('text')%%00010            .classed('knime-tick-label', true);%%00010        var tick = axis.selectAll('.knime-axis .tick')%%00010            .classed('knime-tick', true);%%00010        tick.selectAll('text')%%00010            .classed('knime-tick-label', true);%%00010        tick.selectAll('line')%%00010            .classed('knime-tick-line', true);%%00010%%00010        // legend%%00010        d3.selectAll('.nv-legendWrap')%%00010            .classed('knime-legend', true);%%00010        d3.selectAll('.nv-legend-symbol')%%00010            .classed('knime-legend-symbol', true);%%00010        d3.selectAll('.nv-legend-text')%%00010            .classed('knime-legend-label', true);%%00010%%00010        // Tooltip for axis labels allows to receive all mouse events%%00010        var axisToolTip = svg.selectAll('.knime-tick-label');%%00010        var labelToolTip = svg.selectAll('.knime-axis-label');%%00010        axisToolTip.style('pointer-events', 'all');%%00010        labelToolTip.style('pointer-events', 'all');%%00010        updateLabels();%%00010        if (_representation.options.enableSelection) {%%00010            registerClickHandler();%%00010        }%%00010    };%%00010%%00010    setTooltipCssClasses = function () {%%00010        // tooltip%%00010        var tooltip = d3.selectAll('.nvtooltip').classed('knime-tooltip', true);%%00010        tooltip.selectAll('.x-value').classed('knime-tooltip-caption', true).classed('knime-x', true);%%00010        tooltip.selectAll('.legend-color-guide').classed('knime-tooltip-color', true);%%00010        tooltip.selectAll('.key').classed('knime-tooltip-key', true);%%00010        tooltip.selectAll('.value').classed('knime-tooltip-value', true);%%00010    };%%00010%%00010    barChart.validate = function () {%%00010        return true;%%00010    };%%00010%%00010    barChart.getComponentValue = function () {%%00010        return _value;%%00010    };%%00010%%00010    barChart.getSVG = function () {%%00010        var svgElement = d3.select('svg')[0][0];%%00010        knimeService.inlineSvgStyles(svgElement);%%00010%%00010        // Return the SVG as a string.%%00010        return (new XMLSerializer()).serializeToString(svgElement);%%00010    };%%00010%%00010    return barChart;%%00010})();%%00010"/>
</config>
<config key="cssCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="/* make sure colors on bars are correct (inherit from group) */%%00010svg.colored .nvd3 .nv-multibar .nv-groups rect, %%00010svg.colored .nvd3 .nv-multibarHorizontal .nv-groups rect, %%00010svg.colored .nvd3 .nv-discretebar .nv-groups rect {%%00010%%00009fill: inherit !important;%%00010%%00009stroke: inherit !important;%%00010}%%00010%%00010text.knime-tick-label.knime-selected {%%00010%%00009font-weight: bold;%%00010}%%00010rect.knime-selected {%%00010%%00009fill: orange;%%00010%%00009%%00010}%%00010rect.knime-partially-selected {%%00010%%00009fill: grey;%%00010}%%00010text.knime-tick-label.knime-partially-selected {%%00010%%00009font-weight: bold;%%00010}%%00010%%00010rect.nv-bar.positive {%%00010%%00009cursor:pointer;%%00010}%%00010%%00010/* don't display the maximum grid line if present on vertical bar chart */%%00010/*.nv-multiBarWithLegend .knime-axis.knime-y g.tick.knime-tick:nth-last-child(3) line {%%00010    display: none;%%00010}*/"/>
</config>
<config key="jsDependencies">
<entry key="numSettings" type="xint" value="2"/>
<config key="dependency_0">
<entry key="name" type="xstring" value="nvd3"/>
<entry key="path" type="xstring" value="js-lib/nvd3/1.8.6/nv.d3.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" value="nv"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="D3_3.5.5"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_1">
<entry key="name" type="xstring" value="D3_3.5.5"/>
<entry key="path" type="xstring" value="js-lib/d3/d3.v3_5_5.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
</config>
<config key="cssDependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="js-lib/nvd3/1.8.6/nv.d3.min.css"/>
</config>
<entry key="new" type="xboolean" value="false"/>
<entry key="inView" type="xboolean" value="true"/>
<config key="tableIds">
<entry key="array-size" type="xint" value="2"/>
<entry key="0" type="xstring" value="8d1d3044-5857-49b9-96b5-66f3630ba311"/>
<entry key="1" type="xstring" isnull="true" value=""/>
</config>
<config key="variables">
<entry key="numSettings" type="xint" value="1"/>
<entry key="mapClass" type="xstring" value="string"/>
<entry key="key_0" type="xstring" value="knime.workspace"/>
<entry key="class_0" type="xstring" value="java.lang.String"/>
<entry key="value_0" type="xstring" value="C:\Users\NoobZik\knime-workspace"/>
</config>
<config key="binaryFiles">
<entry key="numSettings" type="xint" value="0"/>
<entry key="mapClass" type="xstring" value="string"/>
</config>
<config key="options">
<entry key="numSettings" type="xint" value="22"/>
<entry key="mapClass" type="xstring" value="object"/>
<entry key="key_0" type="xstring" value="displayFullscreenButton"/>
<entry key="class_0" type="xstring" value="java.lang.Boolean"/>
<entry key="value_0" type="xboolean" value="true"/>
<entry key="key_1" type="xstring" value="displayClearSelectionButton"/>
<entry key="class_1" type="xstring" value="java.lang.Boolean"/>
<entry key="value_1" type="xboolean" value="true"/>
<entry key="key_2" type="xstring" value="svg"/>
<entry key="class_2" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
<config key="value_2">
<entry key="width" type="xint" value="800"/>
<entry key="height" type="xint" value="600"/>
<entry key="fullscreen" type="xboolean" value="true"/>
</config>
<entry key="key_3" type="xstring" value="legend"/>
<entry key="class_3" type="xstring" value="java.lang.Boolean"/>
<entry key="value_3" type="xboolean" value="true"/>
<entry key="key_4" type="xstring" value="enableHorizontalToggle"/>
<entry key="class_4" type="xstring" value="java.lang.Boolean"/>
<entry key="value_4" type="xboolean" value="true"/>
<entry key="key_5" type="xstring" value="freq"/>
<entry key="class_5" type="xstring" value="[Ljava.lang.String;"/>
<config key="value_5">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="Count"/>
</config>
<entry key="key_6" type="xstring" value="tooltip"/>
<entry key="class_6" type="xstring" value="java.lang.Boolean"/>
<entry key="value_6" type="xboolean" value="true"/>
<entry key="key_7" type="xstring" value="enableTitleEdit"/>
<entry key="class_7" type="xstring" value="java.lang.Boolean"/>
<entry key="value_7" type="xboolean" value="true"/>
<entry key="key_8" type="xstring" value="enableSelection"/>
<entry key="class_8" type="xstring" value="java.lang.Boolean"/>
<entry key="value_8" type="xboolean" value="true"/>
<entry key="key_9" type="xstring" value="sort"/>
<entry key="class_9" type="xstring" value="java.lang.Boolean"/>
<entry key="value_9" type="xboolean" value="true"/>
<entry key="key_10" type="xstring" value="enableSwitchMissValCat"/>
<entry key="class_10" type="xstring" value="java.lang.Boolean"/>
<entry key="value_10" type="xboolean" value="true"/>
<entry key="key_11" type="xstring" value="enableStackedEdit"/>
<entry key="class_11" type="xstring" value="java.lang.Boolean"/>
<entry key="value_11" type="xboolean" value="true"/>
<entry key="key_12" type="xstring" value="enableAxisEdit"/>
<entry key="class_12" type="xstring" value="java.lang.Boolean"/>
<entry key="value_12" type="xboolean" value="true"/>
<entry key="key_13" type="xstring" value="processInMemory"/>
<entry key="class_13" type="xstring" value="java.lang.Boolean"/>
<entry key="value_13" type="xboolean" value="true"/>
<entry key="key_14" type="xstring" value="reportOnMissingValues"/>
<entry key="class_14" type="xstring" value="java.lang.Boolean"/>
<entry key="value_14" type="xboolean" value="true"/>
<entry key="key_15" type="xstring" value="cat"/>
<entry key="class_15" type="xstring" value="java.lang.String"/>
<entry key="value_15" type="xstring" value="age"/>
<entry key="key_16" type="xstring" value="enableStaggerToggle"/>
<entry key="class_16" type="xstring" value="java.lang.Boolean"/>
<entry key="value_16" type="xboolean" value="true"/>
<entry key="key_17" type="xstring" value="enableViewControls"/>
<entry key="class_17" type="xstring" value="java.lang.Boolean"/>
<entry key="value_17" type="xboolean" value="true"/>
<entry key="key_18" type="xstring" value="showWarnings"/>
<entry key="class_18" type="xstring" value="java.lang.Boolean"/>
<entry key="value_18" type="xboolean" value="true"/>
<entry key="key_19" type="xstring" value="enableSubtitleEdit"/>
<entry key="class_19" type="xstring" value="java.lang.Boolean"/>
<entry key="value_19" type="xboolean" value="true"/>
<entry key="key_20" type="xstring" value="aggr"/>
<entry key="class_20" type="xstring" value="java.lang.String"/>
<entry key="value_20" type="xstring" value="Occurence Count"/>
<entry key="key_21" type="xstring" value="enableMaximumValue"/>
<entry key="class_21" type="xstring" value="java.lang.Boolean"/>
<entry key="value_21" type="xboolean" value="true"/>
</config>
<config key="inObjects">
<entry key="numSettings" type="xint" value="2"/>
<config key="inObject_0">
<entry key="className" type="xstring" value="org.knime.dynamic.js.base.grouped.GroupedProcessor$GroupingResult"/>
<entry key="jsonValue" type="xstring" value="{&quot;table&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTable&quot;,&quot;id&quot;:&quot;996f6124-8a62-4132-9caf-b7cadddcf52a&quot;,&quot;fragmentFirstRowIndex&quot;:0,&quot;totalFilteredRows&quot;:0,&quot;fragment&quot;:false,&quot;rows&quot;:[{&quot;data&quot;:[&quot;50s&quot;,600.0],&quot;rowKey&quot;:&quot;Row0&quot;},{&quot;data&quot;:[&quot;30s&quot;,452.0],&quot;rowKey&quot;:&quot;Row1&quot;},{&quot;data&quot;:[&quot;20s&quot;,824.0],&quot;rowKey&quot;:&quot;Row2&quot;},{&quot;data&quot;:[&quot;60s&quot;,405.0],&quot;rowKey&quot;:&quot;Row3&quot;},{&quot;data&quot;:[&quot;80s&quot;,156.0],&quot;rowKey&quot;:&quot;Row4&quot;},{&quot;data&quot;:[&quot;70s&quot;,204.0],&quot;rowKey&quot;:&quot;Row5&quot;},{&quot;data&quot;:[&quot;40s&quot;,460.0],&quot;rowKey&quot;:&quot;Row6&quot;},{&quot;data&quot;:[&quot;10s&quot;,150.0],&quot;rowKey&quot;:&quot;Row7&quot;},{&quot;data&quot;:[&quot;90s&quot;,45.0],&quot;rowKey&quot;:&quot;Row8&quot;},{&quot;data&quot;:[&quot;0s&quot;,56.0],&quot;rowKey&quot;:&quot;Row9&quot;},{&quot;data&quot;:[&quot;100s&quot;,1.0],&quot;rowKey&quot;:&quot;Row10&quot;}],&quot;spec&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTableSpec&quot;,&quot;rowColorValues&quot;:[&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;],&quot;containsMissingValues&quot;:[false,false],&quot;extensionTypes&quot;:[],&quot;extensionNames&quot;:[],&quot;possibleValues&quot;:[[&quot;50s&quot;,&quot;30s&quot;,&quot;20s&quot;,&quot;60s&quot;,&quot;80s&quot;,&quot;70s&quot;,&quot;40s&quot;,&quot;10s&quot;,&quot;90s&quot;,&quot;0s&quot;,&quot;100s&quot;],null],&quot;numColumns&quot;:2,&quot;hiddenColumns&quot;:[],&quot;minValues&quot;:[&quot;0s&quot;,1.0],&quot;maxValues&quot;:[&quot;90s&quot;,824.0],&quot;rowSizeValues&quot;:null,&quot;colNames&quot;:[&quot;age&quot;,&quot;age_1&quot;],&quot;numExtensions&quot;:0,&quot;colTypes&quot;:[&quot;string&quot;,&quot;number&quot;],&quot;numRows&quot;:11,&quot;knimeTypes&quot;:[&quot;String&quot;,&quot;Number (integer)&quot;],&quot;filterIds&quot;:[null,null],&quot;colorModels&quot;:[]},&quot;filtered&quot;:false,&quot;totalRows&quot;:0,&quot;dataHash&quot;:null},&quot;uuid&quot;:&quot;388fd3cf-5e4b-417f-bef8-494e4c9d551e&quot;,&quot;translator&quot;:{&quot;forward&quot;:false,&quot;mapping&quot;:{&quot;Row0&quot;:[&quot;6001000302&quot;,&quot;6001000546&quot;,&quot;2000000081&quot;,&quot;6001000305&quot;,&quot;6001000306&quot;,&quot;6001000428&quot;,&quot;6001000309&quot;,&quot;1500000016&quot;,&quot;2000000082&quot;,&quot;6004000022&quot;,&quot;6004000020&quot;,&quot;6004000021&quot;,&quot;6004000015&quot;,&quot;3013000004&quot;,&quot;6004000019&quot;,&quot;4100000054&quot;,&quot;6004000018&quot;,&quot;6001000310&quot;,&quot;6001000432&quot;,&quot;6001000312&quot;,&quot;6001000433&quot;,&quot;6001000313&quot;,&quot;2000000190&quot;,&quot;1500000021&quot;,&quot;6001000437&quot;,&quot;1500000023&quot;,&quot;1500000024&quot;,&quot;1500000025&quot;,&quot;2000000198&quot;,&quot;2000000199&quot;,&quot;2000000072&quot;,&quot;6004000012&quot;,&quot;6004000007&quot;,&quot;6001000561&quot;,&quot;6001000442&quot;,&quot;6001000202&quot;,&quot;6001000523&quot;,&quot;6001000524&quot;,&quot;4100000074&quot;,&quot;6023000034&quot;,&quot;6009000015&quot;,&quot;6009000014&quot;,&quot;6001000531&quot;,&quot;6001000412&quot;,&quot;6020000005&quot;,&quot;6001000535&quot;,&quot;6020000001&quot;,&quot;6001000418&quot;,&quot;6001000539&quot;,&quot;6020100054&quot;,&quot;6020100055&quot;,&quot;6020100298&quot;,&quot;2000000093&quot;,&quot;4100000082&quot;,&quot;4100000081&quot;,&quot;4100000080&quot;,&quot;6001000542&quot;,&quot;6001000422&quot;,&quot;6001000225&quot;,&quot;6001000467&quot;,&quot;6020000015&quot;,&quot;6001000226&quot;,&quot;6001000589&quot;,&quot;6001000227&quot;,&quot;6001000469&quot;,&quot;6020000017&quot;,&quot;6001000228&quot;,&quot;6020000018&quot;,&quot;6020000012&quot;,&quot;6020000013&quot;,&quot;1200000071&quot;,&quot;6023000009&quot;,&quot;6020000010&quot;,&quot;1200000068&quot;,&quot;6023000012&quot;,&quot;1200000065&quot;,&quot;4100000099&quot;,&quot;6001000471&quot;,&quot;6001000111&quot;,&quot;6001000595&quot;,&quot;6001000596&quot;,&quot;4100000091&quot;,&quot;6001000113&quot;,&quot;6001000234&quot;,&quot;4100000090&quot;,&quot;6001000114&quot;,&quot;6001000477&quot;,&quot;6001000118&quot;,&quot;1200000060&quot;,&quot;6020000021&quot;,&quot;1200000064&quot;,&quot;1200000063&quot;,&quot;1200000061&quot;,&quot;6019000001&quot;,&quot;6023000025&quot;,&quot;6023000024&quot;,&quot;6019000004&quot;,&quot;6019000003&quot;,&quot;6001000480&quot;,&quot;6019000009&quot;,&quot;6001000240&quot;,&quot;6015000016&quot;,&quot;6019000008&quot;,&quot;6019000006&quot;,&quot;6020000019&quot;,&quot;6001000245&quot;,&quot;6001000487&quot;,&quot;6015000018&quot;,&quot;6001000004&quot;,&quot;6001000203&quot;,&quot;1500000030&quot;,&quot;1500000032&quot;,&quot;6001000327&quot;,&quot;6001000569&quot;,&quot;6001000209&quot;,&quot;1000000089&quot;,&quot;1000000094&quot;,&quot;1200000045&quot;,&quot;1000000093&quot;,&quot;1200000043&quot;,&quot;1000000098&quot;,&quot;1200000049&quot;,&quot;1000000090&quot;,&quot;6001000210&quot;,&quot;6001000211&quot;,&quot;6001000575&quot;,&quot;6001000457&quot;,&quot;6001000219&quot;,&quot;5100000014&quot;,&quot;1200000038&quot;,&quot;6001000340&quot;,&quot;6001000461&quot;,&quot;6001000463&quot;,&quot;6001000101&quot;,&quot;6001000464&quot;,&quot;6001000585&quot;,&quot;6001000345&quot;,&quot;2000000240&quot;,&quot;2000000361&quot;,&quot;2000000120&quot;,&quot;2000000121&quot;,&quot;2000000001&quot;,&quot;2000000122&quot;,&quot;2000000364&quot;,&quot;2000000358&quot;,&quot;2000000238&quot;,&quot;2000000118&quot;,&quot;2000000233&quot;,&quot;2000000596&quot;,&quot;2000000234&quot;,&quot;2000000356&quot;,&quot;2000000477&quot;,&quot;2000000115&quot;,&quot;2000000478&quot;,&quot;2000000599&quot;,&quot;6100000107&quot;,&quot;2000000472&quot;,&quot;2000000352&quot;,&quot;2000000470&quot;,&quot;2000000226&quot;,&quot;2000000227&quot;,&quot;2000000349&quot;,&quot;2000000222&quot;,&quot;2000000343&quot;,&quot;2000000464&quot;,&quot;2000000223&quot;,&quot;2000000586&quot;,&quot;2000000225&quot;,&quot;2000000467&quot;,&quot;2000000020&quot;,&quot;2000000142&quot;,&quot;2000000265&quot;,&quot;6020100205&quot;,&quot;2000000140&quot;,&quot;2000000259&quot;,&quot;6019000011&quot;,&quot;2000000255&quot;,&quot;2000000376&quot;,&quot;6019000018&quot;,&quot;6100000022&quot;,&quot;2000000374&quot;,&quot;2000000496&quot;,&quot;2000000250&quot;,&quot;2000000249&quot;,&quot;2000000009&quot;,&quot;2000000002&quot;,&quot;2000000365&quot;,&quot;2000000366&quot;,&quot;2000000246&quot;,&quot;2000000367&quot;,&quot;2000000488&quot;,&quot;2000000126&quot;,&quot;2000000165&quot;,&quot;2000000160&quot;,&quot;2000000040&quot;,&quot;2000000157&quot;,&quot;2000000159&quot;,&quot;6001000631&quot;,&quot;6001000512&quot;,&quot;6001000513&quot;,&quot;2000000273&quot;,&quot;2000000154&quot;,&quot;2000000396&quot;,&quot;5000000006&quot;,&quot;2000000145&quot;,&quot;2000000025&quot;,&quot;2000000026&quot;,&quot;2000000065&quot;,&quot;6001000608&quot;,&quot;2000000067&quot;,&quot;2000000188&quot;,&quot;2000000181&quot;,&quot;2000000062&quot;,&quot;6001000613&quot;,&quot;2000000175&quot;,&quot;2000000297&quot;,&quot;2000000177&quot;,&quot;2000000298&quot;,&quot;2000000171&quot;,&quot;1300000013&quot;,&quot;2000000168&quot;,&quot;2000000289&quot;,&quot;1300000017&quot;,&quot;1000000222&quot;,&quot;1000000346&quot;,&quot;2000000512&quot;,&quot;6008000070&quot;,&quot;1100000098&quot;,&quot;1000000110&quot;,&quot;1000000231&quot;,&quot;2000000631&quot;,&quot;1100000092&quot;,&quot;6011000032&quot;,&quot;1100000090&quot;,&quot;1400000068&quot;,&quot;1400000069&quot;,&quot;6011000036&quot;,&quot;2000000517&quot;,&quot;2000000518&quot;,&quot;2000000639&quot;,&quot;1400000062&quot;,&quot;6100000087&quot;,&quot;6100000086&quot;,&quot;1000000210&quot;,&quot;6100000082&quot;,&quot;6100000080&quot;,&quot;1000000214&quot;,&quot;1000000457&quot;,&quot;1100000086&quot;,&quot;2000000622&quot;,&quot;2000000624&quot;,&quot;2000000625&quot;,&quot;1000000461&quot;,&quot;1000000220&quot;,&quot;1000000462&quot;,&quot;2000000620&quot;,&quot;1400000056&quot;,&quot;2000000509&quot;,&quot;6011000027&quot;,&quot;1000000328&quot;,&quot;1000000449&quot;,&quot;1700000038&quot;,&quot;1000000443&quot;,&quot;1000000444&quot;,&quot;6100000095&quot;,&quot;2000000660&quot;,&quot;1000000200&quot;,&quot;1000000442&quot;,&quot;2000000540&quot;,&quot;6100000093&quot;,&quot;1000000447&quot;,&quot;1700000032&quot;,&quot;1700000031&quot;,&quot;1000000324&quot;,&quot;1700000034&quot;,&quot;1000000204&quot;,&quot;1000000325&quot;,&quot;2000000535&quot;,&quot;2000000656&quot;,&quot;2000000657&quot;,&quot;6001000090&quot;,&quot;2000000658&quot;,&quot;2000000530&quot;,&quot;2000000651&quot;,&quot;2000000410&quot;,&quot;2000000653&quot;,&quot;6001000096&quot;,&quot;1400000048&quot;,&quot;1400000041&quot;,&quot;1400000044&quot;,&quot;1000000438&quot;,&quot;1400000040&quot;,&quot;1000000312&quot;,&quot;1000000430&quot;,&quot;1200004046&quot;,&quot;1700000041&quot;,&quot;1000000431&quot;,&quot;1000000315&quot;,&quot;1000000558&quot;,&quot;1000000435&quot;,&quot;1000000440&quot;,&quot;2000000400&quot;,&quot;1400000036&quot;,&quot;1400000037&quot;,&quot;6011000047&quot;,&quot;6011000046&quot;,&quot;6011000049&quot;,&quot;1400000033&quot;,&quot;1000000429&quot;,&quot;6016000001&quot;,&quot;6100000037&quot;,&quot;1000000427&quot;,&quot;1700000016&quot;,&quot;6008000029&quot;,&quot;1700000015&quot;,&quot;6016000004&quot;,&quot;6016000005&quot;,&quot;1000000540&quot;,&quot;1000000420&quot;,&quot;1000000541&quot;,&quot;2000000320&quot;,&quot;2000000562&quot;,&quot;1700000010&quot;,&quot;1000000545&quot;,&quot;6022000042&quot;,&quot;2000000437&quot;,&quot;2000000558&quot;,&quot;6022000045&quot;,&quot;2000000673&quot;,&quot;1400000028&quot;,&quot;2000000554&quot;,&quot;2000000434&quot;,&quot;2000000555&quot;,&quot;1400000023&quot;,&quot;1400000025&quot;,&quot;6022000040&quot;,&quot;6016000011&quot;,&quot;1000000418&quot;,&quot;1000000416&quot;,&quot;1000000538&quot;,&quot;6100000046&quot;,&quot;1000000411&quot;,&quot;6008000033&quot;,&quot;6100000040&quot;,&quot;1700000021&quot;,&quot;1000000415&quot;,&quot;1700000020&quot;,&quot;6008000035&quot;,&quot;2000000304&quot;,&quot;2000000425&quot;,&quot;6022000033&quot;,&quot;2000000306&quot;,&quot;2000000541&quot;,&quot;2000000662&quot;,&quot;2000000422&quot;,&quot;2000000665&quot;,&quot;6022000038&quot;,&quot;1400000014&quot;,&quot;1400000010&quot;,&quot;6100000038&quot;,&quot;1400000011&quot;,&quot;6100000058&quot;,&quot;3001000004&quot;,&quot;6100000059&quot;,&quot;6100000053&quot;,&quot;2000000216&quot;,&quot;2000000338&quot;,&quot;2000000333&quot;,&quot;6022000025&quot;,&quot;1400000007&quot;,&quot;2000000334&quot;,&quot;6008000050&quot;,&quot;6022000026&quot;,&quot;2000000214&quot;,&quot;1400000003&quot;,&quot;6016000031&quot;,&quot;1700000004&quot;,&quot;6100000065&quot;,&quot;1700000009&quot;,&quot;1000000510&quot;,&quot;2000000571&quot;,&quot;2000000692&quot;,&quot;6022000008&quot;,&quot;6022000009&quot;,&quot;6100000060&quot;,&quot;2000000204&quot;,&quot;6022000010&quot;,&quot;2000000207&quot;,&quot;2000000328&quot;,&quot;2000000321&quot;,&quot;2000000563&quot;,&quot;2000000443&quot;,&quot;2000000202&quot;,&quot;2000000445&quot;,&quot;2000000687&quot;,&quot;6016000021&quot;,&quot;6016000022&quot;,&quot;6001000269&quot;,&quot;1600000032&quot;,&quot;6001000149&quot;,&quot;1600000034&quot;,&quot;4000000026&quot;,&quot;1100000128&quot;,&quot;1100000002&quot;,&quot;6022000001&quot;,&quot;1000000198&quot;,&quot;1000000074&quot;,&quot;6022000004&quot;,&quot;6022000005&quot;,&quot;4000000035&quot;,&quot;6001000152&quot;,&quot;6001000153&quot;,&quot;6001000033&quot;,&quot;6001000275&quot;,&quot;1000000190&quot;,&quot;6001000038&quot;,&quot;1600000043&quot;,&quot;4000000039&quot;,&quot;4000000038&quot;,&quot;1000000179&quot;,&quot;1000000056&quot;,&quot;1000000298&quot;,&quot;1000000182&quot;,&quot;1000000183&quot;,&quot;1000000186&quot;,&quot;1000000187&quot;,&quot;4100000100&quot;,&quot;6001000280&quot;,&quot;3009000006&quot;,&quot;6001000042&quot;,&quot;6001000043&quot;,&quot;6001000164&quot;,&quot;3009000008&quot;,&quot;3009000003&quot;,&quot;4000000042&quot;,&quot;3009000002&quot;,&quot;6001000167&quot;,&quot;3009000005&quot;,&quot;6001000168&quot;,&quot;4000000041&quot;,&quot;6001000368&quot;,&quot;6008000008&quot;,&quot;6001000249&quot;,&quot;6002000019&quot;,&quot;6001000008&quot;,&quot;6015000012&quot;,&quot;4000000004&quot;,&quot;4100000105&quot;,&quot;4100000104&quot;,&quot;1000000288&quot;,&quot;1000000172&quot;,&quot;1000000170&quot;,&quot;1000000291&quot;,&quot;1000000296&quot;,&quot;4100000112&quot;,&quot;1000000173&quot;,&quot;4100000110&quot;,&quot;4000000013&quot;,&quot;4000000014&quot;,&quot;6001000493&quot;,&quot;6015000005&quot;,&quot;6001000373&quot;,&quot;6001000011&quot;,&quot;3009000014&quot;,&quot;6001000254&quot;,&quot;6002000020&quot;,&quot;6015000008&quot;,&quot;6015000009&quot;,&quot;6001000377&quot;,&quot;6001000015&quot;,&quot;6001000137&quot;,&quot;6001000138&quot;,&quot;6001000018&quot;,&quot;6001000139&quot;,&quot;6002000007&quot;,&quot;6002000004&quot;,&quot;1000000036&quot;,&quot;1000000155&quot;,&quot;4100000114&quot;,&quot;6008000010&quot;,&quot;1100000012&quot;,&quot;1100000020&quot;,&quot;1000000161&quot;,&quot;1200000078&quot;,&quot;1200000077&quot;,&quot;1000000041&quot;,&quot;1000000162&quot;,&quot;6002000013&quot;,&quot;4000000025&quot;,&quot;6001000262&quot;,&quot;6001000383&quot;,&quot;6001000142&quot;,&quot;6001000022&quot;,&quot;6001000023&quot;,&quot;6001000386&quot;,&quot;6001000024&quot;,&quot;6001000025&quot;,&quot;6001000267&quot;,&quot;6010000013&quot;,&quot;1000000146&quot;,&quot;1000000267&quot;,&quot;1000000389&quot;,&quot;1000000023&quot;,&quot;1000000386&quot;,&quot;4100000003&quot;,&quot;1000000027&quot;,&quot;1000000148&quot;,&quot;1000000149&quot;,&quot;1000000391&quot;,&quot;1000000032&quot;,&quot;1000000153&quot;,&quot;1000000274&quot;,&quot;1000000033&quot;,&quot;1000000154&quot;,&quot;4100000012&quot;,&quot;4100000133&quot;,&quot;6001000071&quot;,&quot;6001000072&quot;,&quot;1000000031&quot;,&quot;4100000131&quot;,&quot;6001000073&quot;,&quot;6010000009&quot;,&quot;6001000196&quot;,&quot;6001000197&quot;,&quot;6001000198&quot;,&quot;6010000008&quot;,&quot;1000000498&quot;,&quot;1600000008&quot;,&quot;1000000136&quot;,&quot;1000000378&quot;,&quot;6004000052&quot;,&quot;1100000038&quot;,&quot;1000000137&quot;,&quot;1000000381&quot;,&quot;1100000043&quot;,&quot;2000000702&quot;,&quot;6001000080&quot;,&quot;4100000023&quot;,&quot;1000000141&quot;,&quot;6001000085&quot;,&quot;6002000033&quot;,&quot;6002000030&quot;,&quot;1600000013&quot;,&quot;1000000003&quot;,&quot;1000000366&quot;,&quot;6004000040&quot;,&quot;1000000125&quot;,&quot;1000000246&quot;,&quot;1000000488&quot;,&quot;1000000001&quot;,&quot;1000000365&quot;,&quot;1000000247&quot;,&quot;1000000006&quot;,&quot;1000000127&quot;,&quot;1000000248&quot;,&quot;1100000075&quot;,&quot;1000000491&quot;,&quot;4100000030&quot;,&quot;1100000073&quot;,&quot;1000000131&quot;,&quot;1000000373&quot;,&quot;1000000011&quot;,&quot;1000000132&quot;,&quot;1000000253&quot;,&quot;6001000170&quot;,&quot;6001000292&quot;,&quot;1000000372&quot;,&quot;6001000172&quot;,&quot;6006000019&quot;,&quot;6001000295&quot;,&quot;6006000016&quot;,&quot;6001000297&quot;,&quot;6001000056&quot;,&quot;6001000057&quot;,&quot;6001000178&quot;,&quot;6006000012&quot;,&quot;2000000618&quot;,&quot;6001000059&quot;,&quot;1600000022&quot;,&quot;6006000010&quot;,&quot;1600000021&quot;,&quot;1000000235&quot;,&quot;6004000033&quot;,&quot;1000000118&quot;,&quot;1100000058&quot;,&quot;3012000008&quot;,&quot;1000000115&quot;,&quot;1100000055&quot;,&quot;1600000028&quot;,&quot;1100000056&quot;,&quot;6004000027&quot;,&quot;6001000060&quot;,&quot;6004000028&quot;,&quot;1000000240&quot;,&quot;6001000183&quot;,&quot;6001000064&quot;,&quot;6001000066&quot;,&quot;6010000019&quot;,&quot;6001000189&quot;,&quot;6001000069&quot;],&quot;Row1&quot;:[&quot;6001000304&quot;,&quot;1500000010&quot;,&quot;4100000049&quot;,&quot;2000000089&quot;,&quot;6004000023&quot;,&quot;6023000049&quot;,&quot;2000000085&quot;,&quot;3013000002&quot;,&quot;3013000001&quot;,&quot;3013000007&quot;,&quot;6023000050&quot;,&quot;2000000191&quot;,&quot;2000000196&quot;,&quot;2000000071&quot;,&quot;6004000011&quot;,&quot;2000000193&quot;,&quot;4100000062&quot;,&quot;2000000068&quot;,&quot;4100000067&quot;,&quot;6004000009&quot;,&quot;6001000404&quot;,&quot;6023000027&quot;,&quot;6009000010&quot;,&quot;6023000035&quot;,&quot;6023000030&quot;,&quot;4100000076&quot;,&quot;4100000071&quot;,&quot;6001000533&quot;,&quot;6001000537&quot;,&quot;1500000005&quot;,&quot;2000000098&quot;,&quot;1500000007&quot;,&quot;1500000008&quot;,&quot;2000000095&quot;,&quot;4100000086&quot;,&quot;4100000084&quot;,&quot;6009000004&quot;,&quot;6023000040&quot;,&quot;6009000009&quot;,&quot;6023000008&quot;,&quot;1200000072&quot;,&quot;6023000006&quot;,&quot;4100000095&quot;,&quot;4100000094&quot;,&quot;5100000017&quot;,&quot;6015000024&quot;,&quot;6001000110&quot;,&quot;6001000231&quot;,&quot;4100000093&quot;,&quot;6020000023&quot;,&quot;6020000024&quot;,&quot;6023000018&quot;,&quot;1200000057&quot;,&quot;6023000021&quot;,&quot;1200000059&quot;,&quot;6015000015&quot;,&quot;6001000243&quot;,&quot;6001000207&quot;,&quot;6001000208&quot;,&quot;1100000108&quot;,&quot;1500000036&quot;,&quot;1200000053&quot;,&quot;3018000001&quot;,&quot;1000000096&quot;,&quot;1000000097&quot;,&quot;6001000213&quot;,&quot;1500000040&quot;,&quot;6001000214&quot;,&quot;6001000218&quot;,&quot;1000000081&quot;,&quot;5100000004&quot;,&quot;1000000085&quot;,&quot;1000000086&quot;,&quot;6001000220&quot;,&quot;6001000586&quot;,&quot;6001000224&quot;,&quot;6100000113&quot;,&quot;1000000505&quot;,&quot;2000000485&quot;,&quot;1000000503&quot;,&quot;2000000116&quot;,&quot;6019000036&quot;,&quot;6100000109&quot;,&quot;2000000471&quot;,&quot;2000000351&quot;,&quot;2000000347&quot;,&quot;2000000348&quot;,&quot;2000000469&quot;,&quot;2000000224&quot;,&quot;2000000466&quot;,&quot;6100000014&quot;,&quot;2000000262&quot;,&quot;2000000383&quot;,&quot;2000000144&quot;,&quot;2000000386&quot;,&quot;2000000013&quot;,&quot;2000000134&quot;,&quot;2000000014&quot;,&quot;2000000377&quot;,&quot;2000000015&quot;,&quot;6100000009&quot;,&quot;6100000026&quot;,&quot;6100000024&quot;,&quot;2000000010&quot;,&quot;2000000011&quot;,&quot;2000000133&quot;,&quot;2000000370&quot;,&quot;2000000371&quot;,&quot;2000000006&quot;,&quot;2000000369&quot;,&quot;2000000123&quot;,&quot;2000000245&quot;,&quot;2000000487&quot;,&quot;6100000018&quot;,&quot;6100000016&quot;,&quot;6001000505&quot;,&quot;2000000043&quot;,&quot;2000000045&quot;,&quot;2000000287&quot;,&quot;5000000003&quot;,&quot;2000000041&quot;,&quot;1300000005&quot;,&quot;2000000039&quot;,&quot;1300000004&quot;,&quot;1300000003&quot;,&quot;2000000035&quot;,&quot;2000000156&quot;,&quot;2000000036&quot;,&quot;2000000278&quot;,&quot;2000000037&quot;,&quot;2000000279&quot;,&quot;2000000038&quot;,&quot;1300000009&quot;,&quot;1300000008&quot;,&quot;1300000007&quot;,&quot;1300000006&quot;,&quot;6001000632&quot;,&quot;2000000395&quot;,&quot;2000000033&quot;,&quot;2000000270&quot;,&quot;2000000267&quot;,&quot;2000000268&quot;,&quot;6001000520&quot;,&quot;2000000186&quot;,&quot;5000000020&quot;,&quot;1300000026&quot;,&quot;1300000024&quot;,&quot;5000000019&quot;,&quot;2000000057&quot;,&quot;2000000299&quot;,&quot;2000000058&quot;,&quot;2000000059&quot;,&quot;1400000089&quot;,&quot;1400000088&quot;,&quot;1400000082&quot;,&quot;6100000103&quot;,&quot;2000000290&quot;,&quot;2000000054&quot;,&quot;2000000296&quot;,&quot;2000000291&quot;,&quot;2000000052&quot;,&quot;2000000173&quot;,&quot;2000000294&quot;,&quot;2000000049&quot;,&quot;1400000078&quot;,&quot;1300000019&quot;,&quot;1400000070&quot;,&quot;1000000229&quot;,&quot;6100000074&quot;,&quot;1000000100&quot;,&quot;1000000343&quot;,&quot;1000000106&quot;,&quot;1000000227&quot;,&quot;1000000107&quot;,&quot;1000000349&quot;,&quot;1100000088&quot;,&quot;1000000105&quot;,&quot;1000000351&quot;,&quot;1000000350&quot;,&quot;1000000471&quot;,&quot;1400000067&quot;,&quot;6011000035&quot;,&quot;6011000017&quot;,&quot;6016000035&quot;,&quot;1000000219&quot;,&quot;6100000085&quot;,&quot;1000000455&quot;,&quot;1000000216&quot;,&quot;1000000458&quot;,&quot;1000000335&quot;,&quot;1000000341&quot;,&quot;1100000081&quot;,&quot;1400000052&quot;,&quot;2000000626&quot;,&quot;6011000025&quot;,&quot;1400000053&quot;,&quot;1400000054&quot;,&quot;1400000055&quot;,&quot;1700000036&quot;,&quot;1700000037&quot;,&quot;1700000039&quot;,&quot;1000000201&quot;,&quot;1000000323&quot;,&quot;1000000446&quot;,&quot;1700000033&quot;,&quot;6001000091&quot;,&quot;2000000532&quot;,&quot;6001000097&quot;,&quot;6001000098&quot;,&quot;2000000417&quot;,&quot;1400000042&quot;,&quot;2000000418&quot;,&quot;2000000539&quot;,&quot;1000000317&quot;,&quot;1000000552&quot;,&quot;1700000040&quot;,&quot;2000000524&quot;,&quot;2000000646&quot;,&quot;2000000640&quot;,&quot;1000000561&quot;,&quot;2000000521&quot;,&quot;2000000642&quot;,&quot;2000000401&quot;,&quot;2000000522&quot;,&quot;1400000030&quot;,&quot;2000000648&quot;,&quot;1400000032&quot;,&quot;1000000549&quot;,&quot;1700000018&quot;,&quot;1000000301&quot;,&quot;1000000543&quot;,&quot;2000000561&quot;,&quot;2000000682&quot;,&quot;2000000441&quot;,&quot;2000000683&quot;,&quot;1000000425&quot;,&quot;1000000426&quot;,&quot;1000000547&quot;,&quot;1000000424&quot;,&quot;2000000438&quot;,&quot;2000000552&quot;,&quot;2000000311&quot;,&quot;1400000029&quot;,&quot;1400000024&quot;,&quot;1400000026&quot;,&quot;1000000539&quot;,&quot;1000000537&quot;,&quot;1700000026&quot;,&quot;6100000041&quot;,&quot;2000000670&quot;,&quot;2000000430&quot;,&quot;1000000535&quot;,&quot;6008000037&quot;,&quot;2000000303&quot;,&quot;2000000666&quot;,&quot;2000000546&quot;,&quot;2000000667&quot;,&quot;2000000427&quot;,&quot;2000000548&quot;,&quot;1400000016&quot;,&quot;2000000300&quot;,&quot;2000000301&quot;,&quot;1400000012&quot;,&quot;2000000428&quot;,&quot;2000000549&quot;,&quot;6100000056&quot;,&quot;3001000008&quot;,&quot;2000000340&quot;,&quot;2000000582&quot;,&quot;6022000018&quot;,&quot;2000000220&quot;,&quot;2000000342&quot;,&quot;1000000403&quot;,&quot;6022000020&quot;,&quot;2000000579&quot;,&quot;6022000022&quot;,&quot;2000000339&quot;,&quot;2000000332&quot;,&quot;2000000453&quot;,&quot;2000000454&quot;,&quot;2000000697&quot;,&quot;2000000698&quot;,&quot;1400000001&quot;,&quot;1000000515&quot;,&quot;1000000516&quot;,&quot;1000000519&quot;,&quot;2000000570&quot;,&quot;6100000061&quot;,&quot;6022000007&quot;,&quot;2000000452&quot;,&quot;1000000514&quot;,&quot;1000000511&quot;,&quot;1700000001&quot;,&quot;2000000325&quot;,&quot;2000000688&quot;,&quot;2000000447&quot;,&quot;2000000689&quot;,&quot;2000000569&quot;,&quot;6022000012&quot;,&quot;2000000200&quot;,&quot;2000000442&quot;,&quot;2000000322&quot;,&quot;2000000685&quot;,&quot;6022000015&quot;,&quot;2000000566&quot;,&quot;6001000027&quot;,&quot;1600000030&quot;,&quot;1100000122&quot;,&quot;1100000130&quot;,&quot;1000000191&quot;,&quot;1000000071&quot;,&quot;6022000002&quot;,&quot;1000000195&quot;,&quot;1000000075&quot;,&quot;6001000030&quot;,&quot;4000000036&quot;,&quot;1000000058&quot;,&quot;1000000181&quot;,&quot;1000000065&quot;,&quot;1000000066&quot;,&quot;1000000063&quot;,&quot;1000000184&quot;,&quot;1000000064&quot;,&quot;1000000185&quot;,&quot;6001000282&quot;,&quot;6001000287&quot;,&quot;6006000023&quot;,&quot;6001000009&quot;,&quot;4000000007&quot;,&quot;4000000005&quot;,&quot;4100000109&quot;,&quot;1000000290&quot;,&quot;1000000052&quot;,&quot;1000000295&quot;,&quot;6001000370&quot;,&quot;6001000492&quot;,&quot;6001000131&quot;,&quot;6001000252&quot;,&quot;6002000022&quot;,&quot;7000000011&quot;,&quot;6001000374&quot;,&quot;6001000133&quot;,&quot;6001000375&quot;,&quot;6001000013&quot;,&quot;7000000014&quot;,&quot;6002000008&quot;,&quot;3010000001&quot;,&quot;1100000019&quot;,&quot;1200000080&quot;,&quot;1000000035&quot;,&quot;1000000156&quot;,&quot;1000000277&quot;,&quot;1100000016&quot;,&quot;4100000113&quot;,&quot;1200000086&quot;,&quot;1100000014&quot;,&quot;1100000134&quot;,&quot;4100000119&quot;,&quot;1100000132&quot;,&quot;1000000281&quot;,&quot;1000000282&quot;,&quot;1200000076&quot;,&quot;6001000144&quot;,&quot;7000000006&quot;,&quot;1000000026&quot;,&quot;4100000126&quot;,&quot;1000000265&quot;,&quot;4100000125&quot;,&quot;1100000049&quot;,&quot;4100000124&quot;,&quot;6004000061&quot;,&quot;6004000066&quot;,&quot;4100000009&quot;,&quot;4100000129&quot;,&quot;1000000275&quot;,&quot;1100000050&quot;,&quot;4100000011&quot;,&quot;6001000193&quot;,&quot;6001000074&quot;,&quot;6002000046&quot;,&quot;2000000714&quot;,&quot;6001000078&quot;,&quot;6001000079&quot;,&quot;1000000135&quot;,&quot;1000000377&quot;,&quot;4100000138&quot;,&quot;1000000257&quot;,&quot;1000000255&quot;,&quot;1000000139&quot;,&quot;1000000379&quot;,&quot;1000000138&quot;,&quot;4100000018&quot;,&quot;1000000260&quot;,&quot;2000000701&quot;,&quot;1000000022&quot;,&quot;1000000382&quot;,&quot;4100000022&quot;,&quot;4100000143&quot;,&quot;4100000021&quot;,&quot;4000000002&quot;,&quot;2000000708&quot;,&quot;4000000003&quot;,&quot;4000000001&quot;,&quot;6001000089&quot;,&quot;1600000011&quot;,&quot;1000000009&quot;,&quot;6011000008&quot;,&quot;1000000245&quot;,&quot;3008000001&quot;,&quot;4100000027&quot;,&quot;1000000485&quot;,&quot;1000000002&quot;,&quot;6004000044&quot;,&quot;6004000045&quot;,&quot;1000000126&quot;,&quot;2000000611&quot;,&quot;1100000076&quot;,&quot;6004000035&quot;,&quot;1000000252&quot;,&quot;1000000495&quot;,&quot;1000000371&quot;,&quot;6004000039&quot;,&quot;2000000610&quot;,&quot;4100000032&quot;,&quot;6001000052&quot;,&quot;2000000617&quot;,&quot;6001000179&quot;,&quot;6011000015&quot;,&quot;1600000024&quot;,&quot;1600000023&quot;,&quot;1000000477&quot;,&quot;1600000029&quot;,&quot;6004000030&quot;,&quot;1000000111&quot;,&quot;1000000474&quot;,&quot;4100000037&quot;,&quot;1000000116&quot;,&quot;1000000479&quot;,&quot;1600000027&quot;,&quot;4100000042&quot;,&quot;1000000480&quot;,&quot;2000000601&quot;,&quot;4100000040&quot;,&quot;1100000063&quot;,&quot;1000000120&quot;,&quot;1000000483&quot;,&quot;1000000363&quot;,&quot;6001000181&quot;,&quot;1000000482&quot;,&quot;4100000043&quot;,&quot;6004000029&quot;,&quot;6006000007&quot;],&quot;Row8&quot;:[&quot;6001000501&quot;,&quot;6001000567&quot;,&quot;6001000447&quot;,&quot;1000000109&quot;,&quot;6008000006&quot;,&quot;6008000028&quot;,&quot;6001000526&quot;,&quot;6020000036&quot;,&quot;6008000023&quot;,&quot;6008000045&quot;,&quot;6008000022&quot;,&quot;6008000044&quot;,&quot;6008000065&quot;,&quot;6008000020&quot;,&quot;6008000027&quot;,&quot;2000000380&quot;,&quot;2000000381&quot;,&quot;6008000047&quot;,&quot;1200003578&quot;,&quot;2000000432&quot;,&quot;6008000051&quot;,&quot;2000000378&quot;,&quot;2000000379&quot;,&quot;6001000293&quot;,&quot;6001000472&quot;,&quot;1400000085&quot;,&quot;6001000353&quot;,&quot;2000000419&quot;,&quot;6001000355&quot;,&quot;6001000358&quot;,&quot;6001000359&quot;,&quot;6001000458&quot;,&quot;6008000018&quot;,&quot;6001000459&quot;,&quot;5100000011&quot;,&quot;1000000279&quot;,&quot;6008000032&quot;,&quot;6008000059&quot;,&quot;2000000405&quot;,&quot;6008000040&quot;,&quot;6008000060&quot;,&quot;4000000021&quot;,&quot;6001000563&quot;,&quot;6001000201&quot;,&quot;6001000565&quot;],&quot;Row9&quot;:[&quot;6001000545&quot;,&quot;6100000114&quot;,&quot;6100000110&quot;,&quot;6001000506&quot;,&quot;6100000075&quot;,&quot;2000000284&quot;,&quot;1100000126&quot;,&quot;1100000125&quot;,&quot;2000000281&quot;,&quot;2000000479&quot;,&quot;2000000436&quot;,&quot;4100000096&quot;,&quot;6016000038&quot;,&quot;1100000117&quot;,&quot;2000000394&quot;,&quot;1100000079&quot;,&quot;2000000195&quot;,&quot;6023000022&quot;,&quot;2000000103&quot;,&quot;2000000027&quot;,&quot;4100000065&quot;,&quot;4000000045&quot;,&quot;2000000109&quot;,&quot;6016000042&quot;,&quot;6001000048&quot;,&quot;6100000050&quot;,&quot;1000000524&quot;,&quot;4100000108&quot;,&quot;1000000489&quot;,&quot;1100000066&quot;,&quot;1400000009&quot;,&quot;6009000011&quot;,&quot;4100000072&quot;,&quot;4100000079&quot;,&quot;1100000072&quot;,&quot;6009000012&quot;,&quot;6011000052&quot;,&quot;1000000251&quot;,&quot;2000000654&quot;,&quot;2000000615&quot;,&quot;6016000032&quot;,&quot;4000000015&quot;,&quot;1000000311&quot;,&quot;1000000276&quot;,&quot;2000000132&quot;,&quot;1000000112&quot;,&quot;2000000331&quot;,&quot;6023000047&quot;,&quot;1100000141&quot;,&quot;6023000045&quot;,&quot;1000000121&quot;,&quot;1000000481&quot;,&quot;4100000088&quot;,&quot;6011000043&quot;,&quot;1400000074&quot;,&quot;6001000145&quot;],&quot;Row6&quot;:[&quot;1500000011&quot;,&quot;6001000548&quot;,&quot;1500000012&quot;,&quot;6001000307&quot;,&quot;6001000549&quot;,&quot;2000000086&quot;,&quot;1500000017&quot;,&quot;2000000088&quot;,&quot;4100000047&quot;,&quot;2000000083&quot;,&quot;4100000052&quot;,&quot;3013000003&quot;,&quot;4100000056&quot;,&quot;6001000435&quot;,&quot;6001000318&quot;,&quot;2000000075&quot;,&quot;1500000027&quot;,&quot;4100000059&quot;,&quot;2000000073&quot;,&quot;4100000063&quot;,&quot;2000000189&quot;,&quot;4100000068&quot;,&quot;2000000069&quot;,&quot;6001000320&quot;,&quot;6001000321&quot;,&quot;4100000069&quot;,&quot;4100000073&quot;,&quot;6023000032&quot;,&quot;4100000077&quot;,&quot;6023000031&quot;,&quot;3005000003&quot;,&quot;6001000411&quot;,&quot;6020000004&quot;,&quot;2000000090&quot;,&quot;6001000413&quot;,&quot;2000000091&quot;,&quot;6020000007&quot;,&quot;6020000002&quot;,&quot;1500000004&quot;,&quot;1500000006&quot;,&quot;2000000096&quot;,&quot;4100000085&quot;,&quot;6023000048&quot;,&quot;6009000002&quot;,&quot;6009000005&quot;,&quot;6001000229&quot;,&quot;1200000070&quot;,&quot;1200000074&quot;,&quot;4100000097&quot;,&quot;5100000015&quot;,&quot;6015000025&quot;,&quot;6001000478&quot;,&quot;6001000237&quot;,&quot;6001000479&quot;,&quot;6001000238&quot;,&quot;6020000029&quot;,&quot;6001000360&quot;,&quot;6001000361&quot;,&quot;6001000244&quot;,&quot;6001000246&quot;,&quot;6001000367&quot;,&quot;6001000488&quot;,&quot;6001000003&quot;,&quot;6001000206&quot;,&quot;5100000001&quot;,&quot;1200000044&quot;,&quot;1000000091&quot;,&quot;6001000332&quot;,&quot;6001000578&quot;,&quot;6001000216&quot;,&quot;6001000337&quot;,&quot;6001000217&quot;,&quot;6001000338&quot;,&quot;1000000078&quot;,&quot;1000000199&quot;,&quot;5100000010&quot;,&quot;1200000033&quot;,&quot;1000000088&quot;,&quot;5100000006&quot;,&quot;1200000036&quot;,&quot;6001000221&quot;,&quot;2000000242&quot;,&quot;2000000480&quot;,&quot;2000000117&quot;,&quot;2000000354&quot;,&quot;2000000113&quot;,&quot;2000000592&quot;,&quot;2000000230&quot;,&quot;2000000110&quot;,&quot;2000000231&quot;,&quot;2000000353&quot;,&quot;2000000468&quot;,&quot;2000000107&quot;,&quot;2000000101&quot;,&quot;2000000102&quot;,&quot;2000000104&quot;,&quot;6100000012&quot;,&quot;2000000263&quot;,&quot;2000000264&quot;,&quot;2000000023&quot;,&quot;2000000260&quot;,&quot;2000000261&quot;,&quot;2000000139&quot;,&quot;6100000005&quot;,&quot;6100000006&quot;,&quot;6100000025&quot;,&quot;2000000251&quot;,&quot;2000000373&quot;,&quot;2000000007&quot;,&quot;2000000003&quot;,&quot;2000000004&quot;,&quot;2000000005&quot;,&quot;6001000507&quot;,&quot;2000000163&quot;,&quot;2000000164&quot;,&quot;2000000280&quot;,&quot;2000000282&quot;,&quot;1300000001&quot;,&quot;2000000158&quot;,&quot;6001000517&quot;,&quot;2000000390&quot;,&quot;2000000269&quot;,&quot;2000000180&quot;,&quot;1400000090&quot;,&quot;2000000066&quot;,&quot;2000000060&quot;,&quot;2000000061&quot;,&quot;2000000182&quot;,&quot;2000000184&quot;,&quot;5000000016&quot;,&quot;1300000021&quot;,&quot;1400000083&quot;,&quot;6100000101&quot;,&quot;6001000617&quot;,&quot;6001000619&quot;,&quot;2000000176&quot;,&quot;2000000172&quot;,&quot;1300000016&quot;,&quot;2000000167&quot;,&quot;2000000047&quot;,&quot;1300000010&quot;,&quot;2000000169&quot;,&quot;1000000108&quot;,&quot;6100000078&quot;,&quot;1400000073&quot;,&quot;1000000102&quot;,&quot;1000000465&quot;,&quot;1000000464&quot;,&quot;1100000096&quot;,&quot;1000000472&quot;,&quot;1100000093&quot;,&quot;1100000094&quot;,&quot;1400000063&quot;,&quot;6011000018&quot;,&quot;1000000218&quot;,&quot;1000000454&quot;,&quot;6100000084&quot;,&quot;1000000332&quot;,&quot;1000000453&quot;,&quot;2000000503&quot;,&quot;1100000085&quot;,&quot;6011000021&quot;,&quot;1400000057&quot;,&quot;6011000020&quot;,&quot;6011000024&quot;,&quot;2000000508&quot;,&quot;1700000035&quot;,&quot;1400000050&quot;,&quot;1000000208&quot;,&quot;1000000329&quot;,&quot;6100000099&quot;,&quot;1700000030&quot;,&quot;6100000092&quot;,&quot;1000000563&quot;,&quot;6100000090&quot;,&quot;2000000534&quot;,&quot;6001000092&quot;,&quot;2000000412&quot;,&quot;6011000051&quot;,&quot;6011000039&quot;,&quot;1000000432&quot;,&quot;1000000433&quot;,&quot;1700000043&quot;,&quot;1000000434&quot;,&quot;1700000045&quot;,&quot;1700000044&quot;,&quot;2000000523&quot;,&quot;1400000038&quot;,&quot;2000000641&quot;,&quot;2000000643&quot;,&quot;1400000034&quot;,&quot;1400000035&quot;,&quot;2000000527&quot;,&quot;1400000031&quot;,&quot;2000000528&quot;,&quot;6011000048&quot;,&quot;1700000014&quot;,&quot;1000000309&quot;,&quot;1700000013&quot;,&quot;6016000002&quot;,&quot;6100000035&quot;,&quot;1700000017&quot;,&quot;6016000007&quot;,&quot;1700000019&quot;,&quot;6016000008&quot;,&quot;1000000300&quot;,&quot;2000000680&quot;,&quot;1000000422&quot;,&quot;2000000560&quot;,&quot;1700000012&quot;,&quot;1000000550&quot;,&quot;2000000433&quot;,&quot;2000000675&quot;,&quot;2000000318&quot;,&quot;1400000020&quot;,&quot;2000000319&quot;,&quot;1400000022&quot;,&quot;1700000025&quot;,&quot;6100000047&quot;,&quot;1700000024&quot;,&quot;6100000048&quot;,&quot;1700000027&quot;,&quot;6100000045&quot;,&quot;1700000029&quot;,&quot;1700000028&quot;,&quot;6100000044&quot;,&quot;6100000042&quot;,&quot;6022000028&quot;,&quot;1000000532&quot;,&quot;1000000530&quot;,&quot;1000000412&quot;,&quot;1700000023&quot;,&quot;1700000022&quot;,&quot;2000000305&quot;,&quot;1400000017&quot;,&quot;2000000542&quot;,&quot;1400000018&quot;,&quot;6022000037&quot;,&quot;1400000015&quot;,&quot;2000000307&quot;,&quot;1000000529&quot;,&quot;3001000003&quot;,&quot;6016000025&quot;,&quot;6016000028&quot;,&quot;1000000409&quot;,&quot;3001000007&quot;,&quot;2000000581&quot;,&quot;6022000017&quot;,&quot;2000000461&quot;,&quot;2000000341&quot;,&quot;2000000584&quot;,&quot;1000000525&quot;,&quot;1000000401&quot;,&quot;2000000215&quot;,&quot;2000000337&quot;,&quot;6022000021&quot;,&quot;6022000024&quot;,&quot;1400000006&quot;,&quot;2000000696&quot;,&quot;1400000008&quot;,&quot;6016000033&quot;,&quot;1700000002&quot;,&quot;1700000005&quot;,&quot;1700000007&quot;,&quot;6016000016&quot;,&quot;1700000006&quot;,&quot;6022000006&quot;,&quot;2000000693&quot;,&quot;6008000053&quot;,&quot;2000000206&quot;,&quot;2000000327&quot;,&quot;6022000011&quot;,&quot;2000000684&quot;,&quot;2000000565&quot;,&quot;2000000208&quot;,&quot;2000000329&quot;,&quot;3001000001&quot;,&quot;6001000029&quot;,&quot;4000000028&quot;,&quot;4000000029&quot;,&quot;1000000069&quot;,&quot;1100000127&quot;,&quot;1000000072&quot;,&quot;1000000073&quot;,&quot;1000000194&quot;,&quot;1100000010&quot;,&quot;1000000070&quot;,&quot;1000000076&quot;,&quot;6001000270&quot;,&quot;6001000271&quot;,&quot;6001000272&quot;,&quot;6002000002&quot;,&quot;6001000399&quot;,&quot;4000000037&quot;,&quot;1000000177&quot;,&quot;1000000299&quot;,&quot;1100000111&quot;,&quot;1000000062&quot;,&quot;1000000180&quot;,&quot;3009000001&quot;,&quot;6001000047&quot;,&quot;6001000006&quot;,&quot;6001000127&quot;,&quot;6001000007&quot;,&quot;6001000128&quot;,&quot;6008000007&quot;,&quot;4000000009&quot;,&quot;6015000011&quot;,&quot;6002000018&quot;,&quot;1000000168&quot;,&quot;1000000169&quot;,&quot;1000000045&quot;,&quot;1000000166&quot;,&quot;1000000167&quot;,&quot;1200000090&quot;,&quot;1100000025&quot;,&quot;4100000107&quot;,&quot;1000000171&quot;,&quot;1000000292&quot;,&quot;3009000010&quot;,&quot;1200000088&quot;,&quot;1000000176&quot;,&quot;1000000053&quot;,&quot;6001000491&quot;,&quot;6001000250&quot;,&quot;3009000017&quot;,&quot;6001000130&quot;,&quot;6001000251&quot;,&quot;6001000494&quot;,&quot;6001000253&quot;,&quot;6001000495&quot;,&quot;6001000012&quot;,&quot;6001000014&quot;,&quot;3009000015&quot;,&quot;6001000017&quot;,&quot;6002000009&quot;,&quot;6015000001&quot;,&quot;6002000005&quot;,&quot;1000000157&quot;,&quot;1000000399&quot;,&quot;1100000017&quot;,&quot;1000000037&quot;,&quot;1000000158&quot;,&quot;1100000135&quot;,&quot;1000000159&quot;,&quot;6014000004&quot;,&quot;1000000280&quot;,&quot;1000000285&quot;,&quot;4100000002&quot;,&quot;4100000123&quot;,&quot;1000000165&quot;,&quot;4100000122&quot;,&quot;4100000121&quot;,&quot;6001000380&quot;,&quot;1000000042&quot;,&quot;1000000163&quot;,&quot;4100000120&quot;,&quot;6001000141&quot;,&quot;4000000022&quot;,&quot;6001000384&quot;,&quot;6002000011&quot;,&quot;6001000266&quot;,&quot;7000000004&quot;,&quot;7000000003&quot;,&quot;6002000039&quot;,&quot;6010000016&quot;,&quot;6002000037&quot;,&quot;6002000038&quot;,&quot;4100000006&quot;,&quot;4100000005&quot;,&quot;1000000144&quot;,&quot;4100000004&quot;,&quot;6004000060&quot;,&quot;1000000024&quot;,&quot;1000000145&quot;,&quot;1100000047&quot;,&quot;6003000004&quot;,&quot;1100000044&quot;,&quot;4100000008&quot;,&quot;4100000007&quot;,&quot;4100000128&quot;,&quot;6004000065&quot;,&quot;1000000392&quot;,&quot;1000000395&quot;,&quot;4100000013&quot;,&quot;6001000191&quot;,&quot;6001000192&quot;,&quot;1000000151&quot;,&quot;1000000272&quot;,&quot;1000000393&quot;,&quot;1000000152&quot;,&quot;1000000273&quot;,&quot;1000000394&quot;,&quot;4100000010&quot;,&quot;6002000040&quot;,&quot;6002000041&quot;,&quot;1600000002&quot;,&quot;6010000005&quot;,&quot;6002000029&quot;,&quot;4100000017&quot;,&quot;6004000051&quot;,&quot;4100000016&quot;,&quot;1000000133&quot;,&quot;1000000496&quot;,&quot;4100000015&quot;,&quot;4100000014&quot;,&quot;4100000135&quot;,&quot;6004000050&quot;,&quot;4100000019&quot;,&quot;6004000054&quot;,&quot;1000000380&quot;,&quot;4100000020&quot;,&quot;6013000002&quot;,&quot;1000000142&quot;,&quot;4100000024&quot;,&quot;6001000081&quot;,&quot;1000000143&quot;,&quot;1000000264&quot;,&quot;1000000385&quot;,&quot;1000000140&quot;,&quot;1000000261&quot;,&quot;1000000262&quot;,&quot;6002000032&quot;,&quot;4100000028&quot;,&quot;1600000018&quot;,&quot;1000000243&quot;,&quot;1000000364&quot;,&quot;4100000025&quot;,&quot;1100000069&quot;,&quot;1600000016&quot;,&quot;4100000029&quot;,&quot;4100000031&quot;,&quot;1000000370&quot;,&quot;4100000035&quot;,&quot;4100000034&quot;,&quot;4100000033&quot;,&quot;6001000050&quot;,&quot;6001000171&quot;,&quot;6001000296&quot;,&quot;6011000011&quot;,&quot;6001000298&quot;,&quot;6006000011&quot;,&quot;6002000048&quot;,&quot;4100000039&quot;,&quot;4100000038&quot;,&quot;1000000353&quot;,&quot;4100000036&quot;,&quot;1000000478&quot;,&quot;1100000064&quot;,&quot;4100000041&quot;,&quot;6002000050&quot;,&quot;6004000024&quot;,&quot;6004000025&quot;,&quot;4100000046&quot;,&quot;6001000180&quot;,&quot;1100000061&quot;,&quot;4100000045&quot;,&quot;6006000003&quot;,&quot;6006000002&quot;,&quot;6006000001&quot;],&quot;Row7&quot;:[&quot;6001000547&quot;,&quot;1000000224&quot;,&quot;2000000087&quot;,&quot;1000000221&quot;,&quot;1000000342&quot;,&quot;4100000048&quot;,&quot;1000000101&quot;,&quot;6100000071&quot;,&quot;1000000104&quot;,&quot;2000000084&quot;,&quot;1100000001&quot;,&quot;1100000121&quot;,&quot;1600000038&quot;,&quot;2000000481&quot;,&quot;2000000359&quot;,&quot;4100000057&quot;,&quot;6001000031&quot;,&quot;6100000108&quot;,&quot;4000000031&quot;,&quot;6001000551&quot;,&quot;4000000030&quot;,&quot;6016000034&quot;,&quot;6100000003&quot;,&quot;6100000004&quot;,&quot;6016000036&quot;,&quot;6016000037&quot;,&quot;6001000439&quot;,&quot;6016000039&quot;,&quot;1000000333&quot;,&quot;2000000594&quot;,&quot;1100000114&quot;,&quot;1500000029&quot;,&quot;2000000232&quot;,&quot;4100000058&quot;,&quot;1100000110&quot;,&quot;6004000010&quot;,&quot;4100000064&quot;,&quot;2000000108&quot;,&quot;2000000229&quot;,&quot;4100000061&quot;,&quot;1100000082&quot;,&quot;1100000083&quot;,&quot;6016000040&quot;,&quot;4100000060&quot;,&quot;6001000166&quot;,&quot;6001000441&quot;,&quot;6016000041&quot;,&quot;4000000040&quot;,&quot;6001000247&quot;,&quot;7000000008&quot;,&quot;1000000287&quot;,&quot;1000000441&quot;,&quot;4100000078&quot;,&quot;6001000490&quot;,&quot;2000000258&quot;,&quot;7000000013&quot;,&quot;6011000053&quot;,&quot;4100000070&quot;,&quot;6001000135&quot;,&quot;1700000046&quot;,&quot;2000000097&quot;,&quot;2000000131&quot;,&quot;1100000015&quot;,&quot;2000000012&quot;,&quot;1000000436&quot;,&quot;2000000127&quot;,&quot;1100000021&quot;,&quot;1000000286&quot;,&quot;6023000044&quot;,&quot;6011000041&quot;,&quot;4100000087&quot;,&quot;6002000014&quot;,&quot;6011000042&quot;,&quot;2000000649&quot;,&quot;6001000541&quot;,&quot;2000000409&quot;,&quot;6001000543&quot;,&quot;1000000548&quot;,&quot;6020000014&quot;,&quot;4100000127&quot;,&quot;6016000009&quot;,&quot;1000000268&quot;,&quot;1000000387&quot;,&quot;1000000302&quot;,&quot;1000000423&quot;,&quot;2000000161&quot;,&quot;1700000011&quot;,&quot;1000000390&quot;,&quot;6023000011&quot;,&quot;2000000312&quot;,&quot;6001000232&quot;,&quot;6100000029&quot;,&quot;6001000475&quot;,&quot;6002000043&quot;,&quot;6010000001&quot;,&quot;1000000497&quot;,&quot;1600000009&quot;,&quot;6004000053&quot;,&quot;2000000272&quot;,&quot;1100000042&quot;,&quot;6004000048&quot;,&quot;6022000031&quot;,&quot;6004000049&quot;,&quot;2000000426&quot;,&quot;6004000047&quot;,&quot;1000000263&quot;,&quot;6022000035&quot;,&quot;2000000388&quot;,&quot;6001000083&quot;,&quot;2000000544&quot;,&quot;4100000142&quot;,&quot;6001000482&quot;,&quot;6001000124&quot;,&quot;6016000023&quot;,&quot;6001000002&quot;,&quot;1000000406&quot;,&quot;6016000026&quot;,&quot;6016000027&quot;,&quot;1500000035&quot;,&quot;6001000605&quot;,&quot;1000000487&quot;,&quot;6004000041&quot;,&quot;2000000221&quot;,&quot;1000000404&quot;,&quot;1300000025&quot;,&quot;1300000023&quot;,&quot;1300000022&quot;,&quot;1000000250&quot;,&quot;2000000455&quot;,&quot;1100000070&quot;,&quot;6001000051&quot;,&quot;6001000294&quot;,&quot;6001000053&quot;,&quot;6001000174&quot;,&quot;6001000450&quot;,&quot;6016000030&quot;,&quot;6011000016&quot;,&quot;6016000013&quot;,&quot;6016000014&quot;,&quot;6016000017&quot;,&quot;1700000008&quot;,&quot;6016000019&quot;,&quot;1000000476&quot;,&quot;2000000174&quot;,&quot;1000000079&quot;,&quot;3012000002&quot;,&quot;1100000062&quot;,&quot;1000000087&quot;,&quot;1000000360&quot;,&quot;6001000341&quot;],&quot;Row4&quot;:[&quot;1000000509&quot;,&quot;1100000006&quot;,&quot;6008000066&quot;,&quot;6019000041&quot;,&quot;6008000069&quot;,&quot;6019000034&quot;,&quot;6019000033&quot;,&quot;1100000095&quot;,&quot;2000000515&quot;,&quot;2000000476&quot;,&quot;1200003896&quot;,&quot;6001000150&quot;,&quot;6019000035&quot;,&quot;6001000151&quot;,&quot;6001000155&quot;,&quot;6001000430&quot;,&quot;6001000434&quot;,&quot;1500000020&quot;,&quot;2000000595&quot;,&quot;2000000074&quot;,&quot;2000000589&quot;,&quot;1100000087&quot;,&quot;1000000060&quot;,&quot;6001000560&quot;,&quot;6001000286&quot;,&quot;6001000045&quot;,&quot;6001000562&quot;,&quot;6001000564&quot;,&quot;6001000402&quot;,&quot;6001000525&quot;,&quot;6001000405&quot;,&quot;6001000406&quot;,&quot;6001000408&quot;,&quot;6008000004&quot;,&quot;6008000003&quot;,&quot;2000000382&quot;,&quot;6008000002&quot;,&quot;2000000416&quot;,&quot;1000000054&quot;,&quot;6009000013&quot;,&quot;2000000652&quot;,&quot;4000000012&quot;,&quot;6001000497&quot;,&quot;6001000530&quot;,&quot;1200003914&quot;,&quot;6001000499&quot;,&quot;6001000532&quot;,&quot;6008000019&quot;,&quot;6008000017&quot;,&quot;6001000417&quot;,&quot;6001000419&quot;,&quot;6008000012&quot;,&quot;4100000115&quot;,&quot;2000000495&quot;,&quot;6008000016&quot;,&quot;6008000015&quot;,&quot;6008000013&quot;,&quot;6019000023&quot;,&quot;1200005767&quot;,&quot;6019000027&quot;,&quot;2000000125&quot;,&quot;1000000284&quot;,&quot;6019000024&quot;,&quot;6001000143&quot;,&quot;4000000020&quot;,&quot;6002000010&quot;,&quot;1200002936&quot;,&quot;6001000268&quot;,&quot;6001000500&quot;,&quot;6001000588&quot;,&quot;6001000502&quot;,&quot;1000000428&quot;,&quot;6001000624&quot;,&quot;6001000504&quot;,&quot;6001000625&quot;,&quot;6015000033&quot;,&quot;6015000034&quot;,&quot;6010000014&quot;,&quot;6015000031&quot;,&quot;6003000007&quot;,&quot;6008000026&quot;,&quot;6008000025&quot;,&quot;6003000006&quot;,&quot;6008000024&quot;,&quot;2000000314&quot;,&quot;2000000316&quot;,&quot;2000000313&quot;,&quot;6022000049&quot;,&quot;1200000901&quot;,&quot;6001000591&quot;,&quot;6001000350&quot;,&quot;6001000592&quot;,&quot;6001000351&quot;,&quot;6001000352&quot;,&quot;1200002769&quot;,&quot;6001000233&quot;,&quot;6001000356&quot;,&quot;6001000514&quot;,&quot;6001000119&quot;,&quot;6001000515&quot;,&quot;6001000516&quot;,&quot;6001000518&quot;,&quot;1000000254&quot;,&quot;2000000275&quot;,&quot;2000000550&quot;,&quot;6020000020&quot;,&quot;1000000013&quot;,&quot;6008000031&quot;,&quot;6008000038&quot;,&quot;2000000545&quot;,&quot;1000000021&quot;,&quot;2000000420&quot;,&quot;6008000041&quot;,&quot;2000000389&quot;,&quot;2000000543&quot;,&quot;3014000001&quot;,&quot;6001000120&quot;,&quot;6001000123&quot;,&quot;2000000309&quot;,&quot;6001000566&quot;,&quot;6016000024&quot;,&quot;6001000568&quot;,&quot;6001000448&quot;,&quot;6001000449&quot;,&quot;6020000034&quot;,&quot;6008000043&quot;,&quot;6020000031&quot;,&quot;6008000042&quot;,&quot;6020000032&quot;,&quot;6008000048&quot;,&quot;1100000074&quot;,&quot;6008000052&quot;,&quot;2000000576&quot;,&quot;2000000335&quot;,&quot;6001000570&quot;,&quot;6001000571&quot;,&quot;6001000453&quot;,&quot;1000000517&quot;,&quot;6001000612&quot;,&quot;6001000615&quot;,&quot;6008000056&quot;,&quot;2000000292&quot;,&quot;3012000007&quot;,&quot;6008000057&quot;,&quot;1300000012&quot;,&quot;6008000063&quot;,&quot;6008000062&quot;,&quot;6008000061&quot;,&quot;6001000460&quot;,&quot;6001000581&quot;,&quot;6001000582&quot;,&quot;6010000018&quot;,&quot;6001000584&quot;,&quot;6001000222&quot;,&quot;6016000020&quot;,&quot;6001000223&quot;],&quot;Row5&quot;:[&quot;6100000077&quot;,&quot;1000000463&quot;,&quot;6008000064&quot;,&quot;1500000019&quot;,&quot;1100000089&quot;,&quot;1100000097&quot;,&quot;2000000633&quot;,&quot;2000000511&quot;,&quot;6011000031&quot;,&quot;2000000516&quot;,&quot;2000000637&quot;,&quot;1400000064&quot;,&quot;6001000311&quot;,&quot;6001000555&quot;,&quot;6001000556&quot;,&quot;6001000557&quot;,&quot;6001000438&quot;,&quot;2000000076&quot;,&quot;1000000331&quot;,&quot;2000000077&quot;,&quot;6100000081&quot;,&quot;1100000077&quot;,&quot;2000000623&quot;,&quot;6016000043&quot;,&quot;1000000209&quot;,&quot;6001000522&quot;,&quot;1000000207&quot;,&quot;6001000527&quot;,&quot;6001000407&quot;,&quot;6001000528&quot;,&quot;6001000529&quot;,&quot;6001000409&quot;,&quot;6011000050&quot;,&quot;2000000533&quot;,&quot;2000000659&quot;,&quot;6001000410&quot;,&quot;1000000439&quot;,&quot;6001000415&quot;,&quot;1000000551&quot;,&quot;1000000437&quot;,&quot;1500000009&quot;,&quot;1200001443&quot;,&quot;2000000403&quot;,&quot;2000000645&quot;,&quot;1200000114&quot;,&quot;6009000007&quot;,&quot;6001000540&quot;,&quot;6001000348&quot;,&quot;6001000349&quot;,&quot;6008000021&quot;,&quot;1000000303&quot;,&quot;2000000556&quot;,&quot;6008000030&quot;,&quot;2000000553&quot;,&quot;1200000620&quot;,&quot;6015000027&quot;,&quot;2000000439&quot;,&quot;6001000354&quot;,&quot;6001000597&quot;,&quot;6016000010&quot;,&quot;6001000598&quot;,&quot;6015000029&quot;,&quot;6001000357&quot;,&quot;6001000599&quot;,&quot;6020000027&quot;,&quot;6008000039&quot;,&quot;6015000022&quot;,&quot;6015000021&quot;,&quot;6019000005&quot;,&quot;2000000302&quot;,&quot;6019000002&quot;,&quot;6001000122&quot;,&quot;2000000583&quot;,&quot;6008000049&quot;,&quot;1100000101&quot;,&quot;1000000523&quot;,&quot;1200000050&quot;,&quot;6008000046&quot;,&quot;1200000048&quot;,&quot;6001000572&quot;,&quot;6001000573&quot;,&quot;6001000574&quot;,&quot;6001000212&quot;,&quot;6001000576&quot;,&quot;6001000577&quot;,&quot;6001000215&quot;,&quot;6001000579&quot;,&quot;2000000572&quot;,&quot;6008000058&quot;,&quot;1000000512&quot;,&quot;5100000008&quot;,&quot;2000000205&quot;,&quot;6001000580&quot;,&quot;6015000035&quot;,&quot;6001000462&quot;,&quot;6001000583&quot;,&quot;6015000036&quot;,&quot;6001000103&quot;,&quot;6001000028&quot;,&quot;4000000027&quot;,&quot;1000000501&quot;,&quot;1100000131&quot;,&quot;6019000031&quot;,&quot;6019000038&quot;,&quot;6001000390&quot;,&quot;6019000037&quot;,&quot;2000000114&quot;,&quot;2000000236&quot;,&quot;6001000154&quot;,&quot;6019000039&quot;,&quot;6100000104&quot;,&quot;6100000002&quot;,&quot;1000000057&quot;,&quot;2000000111&quot;,&quot;2000000591&quot;,&quot;2000000465&quot;,&quot;6001000289&quot;,&quot;6001000129&quot;,&quot;6100000013&quot;,&quot;6008000005&quot;,&quot;1200001064&quot;,&quot;4100000106&quot;,&quot;6019000012&quot;,&quot;3009000011&quot;,&quot;2000000135&quot;,&quot;2000000136&quot;,&quot;2000000499&quot;,&quot;6015000003&quot;,&quot;6001000496&quot;,&quot;6100000008&quot;,&quot;6001000498&quot;,&quot;6015000006&quot;,&quot;4000000019&quot;,&quot;4000000017&quot;,&quot;6100000021&quot;,&quot;4000000016&quot;,&quot;2000000375&quot;,&quot;6019000030&quot;,&quot;1000000039&quot;,&quot;2000000492&quot;,&quot;2000000128&quot;,&quot;2000000008&quot;,&quot;2000000244&quot;,&quot;6019000026&quot;,&quot;1000000283&quot;,&quot;6019000025&quot;,&quot;6019000029&quot;,&quot;4000000023&quot;,&quot;6010000012&quot;,&quot;6001000622&quot;,&quot;6001000626&quot;,&quot;6010000015&quot;,&quot;6001000509&quot;,&quot;1100000048&quot;,&quot;1100000046&quot;,&quot;6003000005&quot;,&quot;1000000028&quot;,&quot;5000000004&quot;,&quot;1100000052&quot;,&quot;3012000001&quot;,&quot;4100000132&quot;,&quot;6002000047&quot;,&quot;6010000007&quot;,&quot;6002000045&quot;,&quot;6001000510&quot;,&quot;1200002085&quot;,&quot;1000000015&quot;,&quot;4100000136&quot;,&quot;2000000276&quot;,&quot;1000000019&quot;,&quot;2000000391&quot;,&quot;1000000016&quot;,&quot;1600000006&quot;,&quot;1000000017&quot;,&quot;5000000005&quot;,&quot;1100000040&quot;,&quot;1000000020&quot;,&quot;6001000521&quot;,&quot;6006000021&quot;,&quot;6001000600&quot;,&quot;6001000602&quot;,&quot;6001000606&quot;,&quot;1600000019&quot;,&quot;2000000064&quot;,&quot;6001000609&quot;,&quot;1000000123&quot;,&quot;1100000071&quot;,&quot;6001000054&quot;,&quot;6001000610&quot;,&quot;6001000611&quot;,&quot;6001000616&quot;,&quot;1400000080&quot;,&quot;2000000295&quot;,&quot;3012000005&quot;,&quot;1000000356&quot;,&quot;3012000004&quot;,&quot;1000000238&quot;,&quot;3012000009&quot;,&quot;2000000050&quot;,&quot;1200007196&quot;,&quot;2000000051&quot;,&quot;2000000293&quot;,&quot;6001000186&quot;,&quot;1200002614&quot;],&quot;Row2&quot;:[&quot;6001000303&quot;,&quot;6001000308&quot;,&quot;6004000016&quot;,&quot;6004000013&quot;,&quot;4100000050&quot;,&quot;6004000014&quot;,&quot;3013000006&quot;,&quot;4100000055&quot;,&quot;6004000017&quot;,&quot;6001000550&quot;,&quot;6001000314&quot;,&quot;6001000315&quot;,&quot;6001000316&quot;,&quot;6001000319&quot;,&quot;6004000004&quot;,&quot;6004000005&quot;,&quot;6004000002&quot;,&quot;6004000003&quot;,&quot;6004000008&quot;,&quot;6004000006&quot;,&quot;6001000322&quot;,&quot;6001000323&quot;,&quot;6004000001&quot;,&quot;4100000075&quot;,&quot;6001000536&quot;,&quot;6001000538&quot;,&quot;4100000083&quot;,&quot;4100000089&quot;,&quot;6009000001&quot;,&quot;6001000300&quot;,&quot;6001000301&quot;,&quot;6001000104&quot;,&quot;6001000346&quot;,&quot;6001000106&quot;,&quot;6001000107&quot;,&quot;6001000109&quot;,&quot;4100000098&quot;,&quot;6001000590&quot;,&quot;6001000594&quot;,&quot;6020000008&quot;,&quot;6001000112&quot;,&quot;6001000115&quot;,&quot;6001000362&quot;,&quot;6001000121&quot;,&quot;6001000363&quot;,&quot;6001000364&quot;,&quot;6001000365&quot;,&quot;6001000324&quot;,&quot;6001000325&quot;,&quot;6001000326&quot;,&quot;6001000328&quot;,&quot;6001000329&quot;,&quot;1000000095&quot;,&quot;1000000092&quot;,&quot;1000000099&quot;,&quot;6001000330&quot;,&quot;6001000331&quot;,&quot;6001000333&quot;,&quot;6001000334&quot;,&quot;6001000335&quot;,&quot;6001000336&quot;,&quot;6001000339&quot;,&quot;1000000083&quot;,&quot;1000000084&quot;,&quot;6001000342&quot;,&quot;1000000080&quot;,&quot;6001000102&quot;,&quot;6001000344&quot;,&quot;1000000506&quot;,&quot;1000000507&quot;,&quot;1000000504&quot;,&quot;1000000508&quot;,&quot;2000000362&quot;,&quot;2000000363&quot;,&quot;1000000502&quot;,&quot;2000000360&quot;,&quot;2000000119&quot;,&quot;2000000112&quot;,&quot;2000000355&quot;,&quot;2000000597&quot;,&quot;2000000598&quot;,&quot;2000000357&quot;,&quot;6100000001&quot;,&quot;2000000593&quot;,&quot;2000000105&quot;,&quot;2000000106&quot;,&quot;2000000345&quot;,&quot;2000000588&quot;,&quot;6100000015&quot;,&quot;6100000010&quot;,&quot;6100000011&quot;,&quot;2000000384&quot;,&quot;2000000143&quot;,&quot;2000000385&quot;,&quot;2000000137&quot;,&quot;6100000007&quot;,&quot;2000000130&quot;,&quot;2000000372&quot;,&quot;2000000129&quot;,&quot;2000000124&quot;,&quot;2000000368&quot;,&quot;6100000019&quot;,&quot;6100000017&quot;,&quot;6001000508&quot;,&quot;2000000166&quot;,&quot;5000000002&quot;,&quot;1300000002&quot;,&quot;2000000398&quot;,&quot;2000000399&quot;,&quot;6001000511&quot;,&quot;2000000152&quot;,&quot;2000000155&quot;,&quot;2000000397&quot;,&quot;5000000011&quot;,&quot;5000000012&quot;,&quot;5000000013&quot;,&quot;2000000150&quot;,&quot;2000000392&quot;,&quot;5000000014&quot;,&quot;2000000393&quot;,&quot;5000000015&quot;,&quot;2000000149&quot;,&quot;5000000007&quot;,&quot;2000000387&quot;,&quot;2000000147&quot;,&quot;1300000030&quot;,&quot;2000000187&quot;,&quot;1300000027&quot;,&quot;5000000017&quot;,&quot;2000000179&quot;,&quot;1300000020&quot;,&quot;1300000028&quot;,&quot;2000000170&quot;,&quot;1300000015&quot;,&quot;1300000014&quot;,&quot;1300000011&quot;,&quot;1000000103&quot;,&quot;1000000348&quot;,&quot;1000000347&quot;,&quot;2000000634&quot;,&quot;1000000352&quot;,&quot;2000000630&quot;,&quot;1100000091&quot;,&quot;1400000065&quot;,&quot;1400000066&quot;,&quot;1400000060&quot;,&quot;1000000339&quot;,&quot;1000000334&quot;,&quot;1000000337&quot;,&quot;1000000338&quot;,&quot;1000000336&quot;,&quot;1100000084&quot;,&quot;1000000340&quot;,&quot;2000000621&quot;,&quot;1400000059&quot;,&quot;2000000628&quot;,&quot;1000000322&quot;,&quot;1000000562&quot;,&quot;1000000321&quot;,&quot;2000000661&quot;,&quot;1000000326&quot;,&quot;1000000327&quot;,&quot;2000000413&quot;,&quot;2000000655&quot;,&quot;2000000414&quot;,&quot;2000000415&quot;,&quot;1400000049&quot;,&quot;1000000330&quot;,&quot;6001000094&quot;,&quot;6001000095&quot;,&quot;1400000045&quot;,&quot;1400000046&quot;,&quot;1400000047&quot;,&quot;6001000099&quot;,&quot;1400000043&quot;,&quot;1000000319&quot;,&quot;1000000559&quot;,&quot;1000000318&quot;,&quot;1000000553&quot;,&quot;1000000554&quot;,&quot;1000000557&quot;,&quot;1000000316&quot;,&quot;1000000313&quot;,&quot;1000000555&quot;,&quot;1000000314&quot;,&quot;1000000556&quot;,&quot;2000000402&quot;,&quot;2000000404&quot;,&quot;2000000407&quot;,&quot;2000000408&quot;,&quot;1000000308&quot;,&quot;1000000306&quot;,&quot;1000000542&quot;,&quot;6022000039&quot;,&quot;2000000440&quot;,&quot;1000000304&quot;,&quot;1000000546&quot;,&quot;1000000305&quot;,&quot;1000000544&quot;,&quot;2000000435&quot;,&quot;2000000677&quot;,&quot;2000000678&quot;,&quot;2000000679&quot;,&quot;6022000044&quot;,&quot;1400000027&quot;,&quot;2000000674&quot;,&quot;2000000676&quot;,&quot;1400000021&quot;,&quot;6022000041&quot;,&quot;1000000531&quot;,&quot;2000000671&quot;,&quot;2000000672&quot;,&quot;1000000536&quot;,&quot;1000000533&quot;,&quot;1000000534&quot;,&quot;2000000424&quot;,&quot;6022000032&quot;,&quot;2000000668&quot;,&quot;2000000669&quot;,&quot;6022000034&quot;,&quot;2000000421&quot;,&quot;2000000663&quot;,&quot;6022000036&quot;,&quot;2000000664&quot;,&quot;1400000019&quot;,&quot;2000000423&quot;,&quot;6021000001&quot;,&quot;6021000002&quot;,&quot;6022000030&quot;,&quot;3001000005&quot;,&quot;1000000526&quot;,&quot;1000000527&quot;,&quot;3001000002&quot;,&quot;3001000006&quot;,&quot;1000000520&quot;,&quot;1000000521&quot;,&quot;2000000462&quot;,&quot;6022000019&quot;,&quot;2000000463&quot;,&quot;1000000522&quot;,&quot;2000000457&quot;,&quot;2000000699&quot;,&quot;2000000218&quot;,&quot;6022000023&quot;,&quot;2000000695&quot;,&quot;2000000213&quot;,&quot;2000000456&quot;,&quot;1400000004&quot;,&quot;1000000518&quot;,&quot;2000000691&quot;,&quot;2000000451&quot;,&quot;2000000694&quot;,&quot;2000000690&quot;,&quot;2000000446&quot;,&quot;2000000448&quot;,&quot;2000000449&quot;,&quot;2000000444&quot;,&quot;2000000686&quot;,&quot;6022000016&quot;,&quot;2000000209&quot;,&quot;1600000033&quot;,&quot;1600000035&quot;,&quot;1100000008&quot;,&quot;1600000031&quot;,&quot;1100000009&quot;,&quot;1100000007&quot;,&quot;1000000188&quot;,&quot;1100000004&quot;,&quot;1000000189&quot;,&quot;1100000005&quot;,&quot;1600000037&quot;,&quot;1100000003&quot;,&quot;1600000036&quot;,&quot;1600000039&quot;,&quot;1000000193&quot;,&quot;1000000192&quot;,&quot;6022000003&quot;,&quot;6001000273&quot;,&quot;6002000003&quot;,&quot;6001000032&quot;,&quot;6001000274&quot;,&quot;6002000001&quot;,&quot;6001000276&quot;,&quot;6001000277&quot;,&quot;6001000036&quot;,&quot;6001000278&quot;,&quot;6001000037&quot;,&quot;6001000279&quot;,&quot;6007000004&quot;,&quot;6007000003&quot;,&quot;1600000040&quot;,&quot;1600000042&quot;,&quot;1600000041&quot;,&quot;1000000178&quot;,&quot;6001000281&quot;,&quot;6001000040&quot;,&quot;3009000007&quot;,&quot;6001000284&quot;,&quot;6001000288&quot;,&quot;6006000024&quot;,&quot;6006000022&quot;,&quot;6001000005&quot;,&quot;6001000489&quot;,&quot;6001000248&quot;,&quot;6002000016&quot;,&quot;6008000001&quot;,&quot;1100000029&quot;,&quot;1100000026&quot;,&quot;1100000027&quot;,&quot;1100000024&quot;,&quot;1100000022&quot;,&quot;1100000023&quot;,&quot;1100000031&quot;,&quot;1100000032&quot;,&quot;1100000030&quot;,&quot;1000000175&quot;,&quot;1000000174&quot;,&quot;3009000018&quot;,&quot;6002000024&quot;,&quot;6002000025&quot;,&quot;6001000010&quot;,&quot;6001000255&quot;,&quot;6002000021&quot;,&quot;6001000256&quot;,&quot;6001000257&quot;,&quot;6001000258&quot;,&quot;6001000259&quot;,&quot;6001000019&quot;,&quot;6002000006&quot;,&quot;1100000018&quot;,&quot;1000000397&quot;,&quot;1000000398&quot;,&quot;1100000013&quot;,&quot;1100000011&quot;,&quot;6003000001&quot;,&quot;3004000001&quot;,&quot;4100000001&quot;,&quot;6001000260&quot;,&quot;6001000021&quot;,&quot;6001000263&quot;,&quot;6001000264&quot;,&quot;6002000012&quot;,&quot;6001000265&quot;,&quot;1000000388&quot;,&quot;1000000147&quot;,&quot;6003000009&quot;,&quot;6003000003&quot;,&quot;6004000067&quot;,&quot;6004000064&quot;,&quot;1100000053&quot;,&quot;1100000054&quot;,&quot;6004000057&quot;,&quot;6001000070&quot;,&quot;1000000396&quot;,&quot;6001000075&quot;,&quot;6001000076&quot;,&quot;6002000044&quot;,&quot;6001000077&quot;,&quot;6002000042&quot;,&quot;1600000001&quot;,&quot;1100000039&quot;,&quot;1600000007&quot;,&quot;1000000375&quot;,&quot;1100000037&quot;,&quot;1000000134&quot;,&quot;1000000376&quot;,&quot;1100000035&quot;,&quot;1100000036&quot;,&quot;1600000003&quot;,&quot;1100000033&quot;,&quot;1100000034&quot;,&quot;1600000005&quot;,&quot;6004000046&quot;,&quot;1100000041&quot;,&quot;1000000384&quot;,&quot;1000000383&quot;,&quot;6001000084&quot;,&quot;6001000086&quot;,&quot;6001000088&quot;,&quot;6002000034&quot;,&quot;6001000049&quot;,&quot;1600000010&quot;,&quot;1600000012&quot;,&quot;1000000124&quot;,&quot;1000000367&quot;,&quot;1000000122&quot;,&quot;1100000068&quot;,&quot;1600000014&quot;,&quot;1600000017&quot;,&quot;6004000042&quot;,&quot;1000000369&quot;,&quot;6004000043&quot;,&quot;6004000037&quot;,&quot;2000000612&quot;,&quot;6004000038&quot;,&quot;6004000036&quot;,&quot;6001000290&quot;,&quot;1000000374&quot;,&quot;6001000291&quot;,&quot;1000000130&quot;,&quot;6006000018&quot;,&quot;6006000017&quot;,&quot;6001000055&quot;,&quot;6006000015&quot;,&quot;6006000014&quot;,&quot;6001000299&quot;,&quot;6006000013&quot;,&quot;6001000058&quot;,&quot;6002000049&quot;,&quot;1000000355&quot;,&quot;1000000114&quot;,&quot;1100000059&quot;,&quot;1000000354&quot;,&quot;1000000359&quot;,&quot;1100000057&quot;,&quot;1600000025&quot;,&quot;6004000034&quot;,&quot;1000000357&quot;,&quot;6004000031&quot;,&quot;1000000358&quot;,&quot;6004000032&quot;,&quot;2000000600&quot;,&quot;6004000026&quot;,&quot;1100000065&quot;,&quot;2000000602&quot;,&quot;1000000362&quot;,&quot;6001000061&quot;,&quot;6006000009&quot;,&quot;1000000361&quot;,&quot;2000000608&quot;,&quot;2000000609&quot;,&quot;6006000004&quot;,&quot;2000000605&quot;,&quot;6001000068&quot;,&quot;2000000606&quot;,&quot;2000000607&quot;,&quot;6001000424&quot;,&quot;2000000080&quot;,&quot;6001000425&quot;,&quot;6001000426&quot;,&quot;6001000427&quot;,&quot;1500000013&quot;,&quot;6001000429&quot;,&quot;1500000014&quot;,&quot;1500000015&quot;,&quot;1500000018&quot;,&quot;2000000079&quot;,&quot;6023000052&quot;,&quot;6023000051&quot;,&quot;6001000431&quot;,&quot;6001000436&quot;,&quot;2000000070&quot;,&quot;1500000022&quot;,&quot;1500000028&quot;,&quot;2000000078&quot;,&quot;6001000440&quot;,&quot;6001000443&quot;,&quot;6001000444&quot;,&quot;6001000403&quot;,&quot;6023000029&quot;,&quot;6023000028&quot;,&quot;6023000036&quot;,&quot;6023000037&quot;,&quot;6023000033&quot;,&quot;2000000092&quot;,&quot;6001000416&quot;,&quot;1500000001&quot;,&quot;6023000038&quot;,&quot;6023000039&quot;,&quot;6023000043&quot;,&quot;6001000420&quot;,&quot;6001000468&quot;,&quot;6015000030&quot;,&quot;6015000032&quot;,&quot;6023000007&quot;,&quot;6023000005&quot;,&quot;6023000014&quot;,&quot;6023000015&quot;,&quot;6023000013&quot;,&quot;6023000010&quot;,&quot;1200000069&quot;,&quot;6001000470&quot;,&quot;6015000026&quot;,&quot;6001000230&quot;,&quot;6001000474&quot;,&quot;6001000235&quot;,&quot;6001000239&quot;,&quot;6015000023&quot;,&quot;6015000020&quot;,&quot;6023000019&quot;,&quot;6023000016&quot;,&quot;6023000017&quot;,&quot;6023000026&quot;,&quot;6023000023&quot;,&quot;1200000058&quot;,&quot;6023000020&quot;,&quot;6001000481&quot;,&quot;6001000241&quot;,&quot;6015000013&quot;,&quot;6001000242&quot;,&quot;6001000484&quot;,&quot;6001000204&quot;,&quot;6001000446&quot;,&quot;1500000031&quot;,&quot;6001000205&quot;,&quot;6001000001&quot;,&quot;1500000033&quot;,&quot;1100000109&quot;,&quot;1500000037&quot;,&quot;1100000105&quot;,&quot;1500000038&quot;,&quot;1100000104&quot;,&quot;1500000039&quot;,&quot;5100000002&quot;,&quot;1100000103&quot;,&quot;5100000003&quot;,&quot;1100000102&quot;,&quot;1200000046&quot;,&quot;6001000451&quot;,&quot;6001000455&quot;,&quot;6001000456&quot;,&quot;5100000012&quot;,&quot;5100000013&quot;,&quot;1200000042&quot;,&quot;1200000035&quot;,&quot;6023000003&quot;,&quot;1200000034&quot;,&quot;5100000009&quot;,&quot;6023000004&quot;,&quot;6023000001&quot;,&quot;6023000002&quot;,&quot;6001000465&quot;,&quot;6001000466&quot;,&quot;6100000111&quot;,&quot;2000000482&quot;,&quot;2000000484&quot;,&quot;2000000243&quot;,&quot;2000000239&quot;,&quot;2000000475&quot;,&quot;2000000235&quot;,&quot;6100000106&quot;,&quot;6100000105&quot;,&quot;2000000473&quot;,&quot;2000000474&quot;,&quot;2000000228&quot;,&quot;6100000115&quot;,&quot;2000000022&quot;,&quot;2000000018&quot;,&quot;2000000257&quot;,&quot;2000000016&quot;,&quot;2000000493&quot;,&quot;2000000252&quot;,&quot;2000000494&quot;,&quot;2000000253&quot;,&quot;2000000254&quot;,&quot;2000000491&quot;,&quot;6019000021&quot;,&quot;6019000020&quot;,&quot;2000000486&quot;,&quot;2000000489&quot;,&quot;6001000623&quot;,&quot;2000000042&quot;,&quot;6001000629&quot;,&quot;2000000283&quot;,&quot;2000000031&quot;,&quot;2000000032&quot;,&quot;2000000274&quot;,&quot;2000000030&quot;,&quot;2000000028&quot;,&quot;6001000400&quot;,&quot;1400000092&quot;,&quot;1400000091&quot;,&quot;2000000063&quot;,&quot;1400000086&quot;,&quot;6100000102&quot;,&quot;2000000053&quot;,&quot;6001000618&quot;,&quot;2000000055&quot;,&quot;2000000056&quot;,&quot;2000000288&quot;,&quot;1400000077&quot;,&quot;6001000620&quot;,&quot;6011000029&quot;,&quot;6011000028&quot;,&quot;6100000079&quot;,&quot;6100000076&quot;,&quot;1000000223&quot;,&quot;1000000466&quot;,&quot;6100000070&quot;,&quot;1000000469&quot;,&quot;1000000225&quot;,&quot;1000000467&quot;,&quot;1000000226&quot;,&quot;1000000468&quot;,&quot;2000000514&quot;,&quot;1000000230&quot;,&quot;1000000470&quot;,&quot;2000000510&quot;,&quot;6011000030&quot;,&quot;6011000034&quot;,&quot;6011000033&quot;,&quot;6011000038&quot;,&quot;2000000519&quot;,&quot;6011000037&quot;,&quot;6011000019&quot;,&quot;6100000088&quot;,&quot;1000000212&quot;,&quot;6100000083&quot;,&quot;1000000213&quot;,&quot;1000000452&quot;,&quot;1000000211&quot;,&quot;1000000217&quot;,&quot;1000000459&quot;,&quot;1000000456&quot;,&quot;2000000502&quot;,&quot;1000000460&quot;,&quot;2000000500&quot;,&quot;6011000023&quot;,&quot;6011000022&quot;,&quot;2000000506&quot;,&quot;2000000507&quot;,&quot;6100000094&quot;,&quot;1000000205&quot;,&quot;1000000206&quot;,&quot;1000000448&quot;,&quot;6100000091&quot;,&quot;1000000203&quot;,&quot;1000000445&quot;,&quot;2000000537&quot;,&quot;1000000450&quot;,&quot;2000000538&quot;,&quot;2000000520&quot;,&quot;6011000044&quot;,&quot;6016000003&quot;,&quot;6100000034&quot;,&quot;6100000030&quot;,&quot;1000000421&quot;,&quot;2000000557&quot;,&quot;2000000559&quot;,&quot;6100000027&quot;,&quot;6100000028&quot;,&quot;1000000419&quot;,&quot;1000000417&quot;,&quot;6100000043&quot;,&quot;1000000410&quot;,&quot;2000000551&quot;,&quot;1000000414&quot;,&quot;1000000413&quot;,&quot;2000000547&quot;,&quot;2000000308&quot;,&quot;1000000407&quot;,&quot;1000000408&quot;,&quot;1000000405&quot;,&quot;6100000055&quot;,&quot;6016000029&quot;,&quot;1000000400&quot;,&quot;2000000100&quot;,&quot;1000000402&quot;,&quot;2000000580&quot;,&quot;2000000574&quot;,&quot;2000000575&quot;,&quot;2000000577&quot;,&quot;1700000003&quot;,&quot;6016000012&quot;,&quot;6100000063&quot;,&quot;6100000064&quot;,&quot;6100000062&quot;,&quot;2000000330&quot;,&quot;2000000573&quot;,&quot;2000000567&quot;,&quot;2000000326&quot;,&quot;2000000568&quot;,&quot;2000000564&quot;,&quot;2000000323&quot;,&quot;2000000324&quot;,&quot;1100000129&quot;,&quot;1000000067&quot;,&quot;1000000068&quot;,&quot;1100000124&quot;,&quot;1100000123&quot;,&quot;1000000077&quot;,&quot;6001000391&quot;,&quot;6001000392&quot;,&quot;6001000393&quot;,&quot;6001000394&quot;,&quot;4000000033&quot;,&quot;6001000395&quot;,&quot;6001000396&quot;,&quot;6001000397&quot;,&quot;4000000032&quot;,&quot;6001000398&quot;,&quot;6001000157&quot;,&quot;6001000158&quot;,&quot;6001000159&quot;,&quot;1100000119&quot;,&quot;1100000118&quot;,&quot;1100000116&quot;,&quot;1100000113&quot;,&quot;1100000112&quot;,&quot;1100000120&quot;,&quot;4100000101&quot;,&quot;6001000161&quot;,&quot;6001000162&quot;,&quot;6001000163&quot;,&quot;4000000044&quot;,&quot;6001000165&quot;,&quot;6001000169&quot;,&quot;6001000126&quot;,&quot;6001000369&quot;,&quot;7000000009&quot;,&quot;4000000008&quot;,&quot;7000000007&quot;,&quot;4000000006&quot;,&quot;1000000047&quot;,&quot;1000000289&quot;,&quot;1000000048&quot;,&quot;4100000103&quot;,&quot;1000000046&quot;,&quot;4100000102&quot;,&quot;6014000002&quot;,&quot;1000000050&quot;,&quot;1000000051&quot;,&quot;1200000089&quot;,&quot;1200000087&quot;,&quot;1000000055&quot;,&quot;1000000297&quot;,&quot;4100000111&quot;,&quot;6001000371&quot;,&quot;6015000004&quot;,&quot;7000000012&quot;,&quot;4000000011&quot;,&quot;6001000132&quot;,&quot;7000000010&quot;,&quot;4000000010&quot;,&quot;6001000376&quot;,&quot;6001000379&quot;,&quot;1000000278&quot;,&quot;1100000139&quot;,&quot;1100000138&quot;,&quot;1000000034&quot;,&quot;1100000136&quot;,&quot;4100000117&quot;,&quot;6014000003&quot;,&quot;1000000043&quot;,&quot;6001000381&quot;,&quot;6001000140&quot;,&quot;6001000382&quot;,&quot;7000000002&quot;,&quot;7000000001&quot;,&quot;6001000385&quot;,&quot;6001000387&quot;,&quot;7000000005&quot;,&quot;6001000146&quot;,&quot;6001000388&quot;,&quot;6001000147&quot;,&quot;6001000389&quot;,&quot;6010000010&quot;,&quot;6010000011&quot;,&quot;6010000017&quot;,&quot;1000000266&quot;,&quot;1000000029&quot;,&quot;1000000269&quot;,&quot;1000000270&quot;,&quot;2000000710&quot;,&quot;1000000271&quot;,&quot;2000000711&quot;,&quot;2000000712&quot;,&quot;2000000713&quot;,&quot;6001000190&quot;,&quot;4100000134&quot;,&quot;6001000194&quot;,&quot;6001000195&quot;,&quot;6010000003&quot;,&quot;6010000004&quot;,&quot;1000000256&quot;,&quot;1000000499&quot;,&quot;4100000137&quot;,&quot;1000000012&quot;,&quot;1000000018&quot;,&quot;1000000258&quot;,&quot;1000000259&quot;,&quot;4100000141&quot;,&quot;6013000001&quot;,&quot;2000000700&quot;,&quot;2000000707&quot;,&quot;2000000709&quot;,&quot;2000000703&quot;,&quot;2000000704&quot;,&quot;2000000705&quot;,&quot;2000000706&quot;,&quot;6011000007&quot;,&quot;6011000009&quot;,&quot;1000000004&quot;,&quot;1000000486&quot;,&quot;1000000007&quot;,&quot;1000000249&quot;,&quot;1000000008&quot;,&quot;1000000005&quot;,&quot;1000000490&quot;,&quot;1000000492&quot;,&quot;1000000493&quot;,&quot;6001000173&quot;,&quot;6011000010&quot;,&quot;6001000175&quot;,&quot;6011000012&quot;,&quot;6001000176&quot;,&quot;6001000177&quot;,&quot;6011000014&quot;,&quot;6011000013&quot;,&quot;6010000022&quot;,&quot;1000000234&quot;,&quot;1000000232&quot;,&quot;1000000233&quot;,&quot;1000000475&quot;,&quot;1000000239&quot;,&quot;1000000236&quot;,&quot;1000000237&quot;,&quot;1000000242&quot;,&quot;1000000484&quot;,&quot;6001000184&quot;,&quot;6001000185&quot;,&quot;6001000187&quot;,&quot;6001000188&quot;,&quot;6011000003&quot;],&quot;Row10&quot;:[&quot;6001000503&quot;],&quot;Row3&quot;:[&quot;6001000423&quot;,&quot;6001000544&quot;,&quot;1200000031&quot;,&quot;4100000053&quot;,&quot;4100000051&quot;,&quot;3013000005&quot;,&quot;6001000552&quot;,&quot;6001000553&quot;,&quot;6001000554&quot;,&quot;6001000558&quot;,&quot;6001000317&quot;,&quot;6001000559&quot;,&quot;1500000026&quot;,&quot;2000000197&quot;,&quot;2000000192&quot;,&quot;2000000194&quot;,&quot;4100000066&quot;,&quot;6001000200&quot;,&quot;6001000401&quot;,&quot;6020100286&quot;,&quot;6001000534&quot;,&quot;6001000414&quot;,&quot;6020000006&quot;,&quot;1500000002&quot;,&quot;1500000003&quot;,&quot;6020000003&quot;,&quot;2000000099&quot;,&quot;2000000094&quot;,&quot;6023000046&quot;,&quot;6023000041&quot;,&quot;6009000003&quot;,&quot;6023000042&quot;,&quot;6009000006&quot;,&quot;6009000008&quot;,&quot;6001000421&quot;,&quot;6001000105&quot;,&quot;6001000347&quot;,&quot;6020000016&quot;,&quot;6001000108&quot;,&quot;6020000011&quot;,&quot;5100000016&quot;,&quot;6001000593&quot;,&quot;6001000473&quot;,&quot;4100000092&quot;,&quot;6020000009&quot;,&quot;6001000476&quot;,&quot;6015000028&quot;,&quot;6001000236&quot;,&quot;6020000026&quot;,&quot;6001000116&quot;,&quot;6001000117&quot;,&quot;6020000028&quot;,&quot;6020000022&quot;,&quot;6020000025&quot;,&quot;1200000062&quot;,&quot;6001000483&quot;,&quot;6019000007&quot;,&quot;6015000014&quot;,&quot;6001000485&quot;,&quot;6015000019&quot;,&quot;6001000486&quot;,&quot;6001000366&quot;,&quot;6015000017&quot;,&quot;6001000125&quot;,&quot;6001000445&quot;,&quot;6020000033&quot;,&quot;1500000034&quot;,&quot;6020000035&quot;,&quot;1100000107&quot;,&quot;1100000106&quot;,&quot;6020000030&quot;,&quot;1100000100&quot;,&quot;1200000051&quot;,&quot;1200000047&quot;,&quot;6001000452&quot;,&quot;6001000454&quot;,&quot;1200003550&quot;,&quot;1000000082&quot;,&quot;5100000005&quot;,&quot;5100000007&quot;,&quot;6001000100&quot;,&quot;6001000343&quot;,&quot;6001000587&quot;,&quot;6100000112&quot;,&quot;2000000241&quot;,&quot;2000000483&quot;,&quot;6020100104&quot;,&quot;6019000040&quot;,&quot;1000000500&quot;,&quot;6020100107&quot;,&quot;2000000237&quot;,&quot;6019000032&quot;,&quot;2000000350&quot;,&quot;2000000590&quot;,&quot;2000000585&quot;,&quot;2000000344&quot;,&quot;2000000587&quot;,&quot;2000000346&quot;,&quot;2000000141&quot;,&quot;2000000021&quot;,&quot;2000000017&quot;,&quot;2000000138&quot;,&quot;2000000019&quot;,&quot;6019000010&quot;,&quot;2000000497&quot;,&quot;6019000016&quot;,&quot;2000000256&quot;,&quot;2000000498&quot;,&quot;6019000015&quot;,&quot;6019000014&quot;,&quot;6019000013&quot;,&quot;6019000019&quot;,&quot;6019000017&quot;,&quot;6100000023&quot;,&quot;6100000020&quot;,&quot;2000000490&quot;,&quot;2000000248&quot;,&quot;6019000022&quot;,&quot;2000000247&quot;,&quot;6019000028&quot;,&quot;6001000621&quot;,&quot;6001000627&quot;,&quot;6001000628&quot;,&quot;2000000285&quot;,&quot;2000000044&quot;,&quot;2000000286&quot;,&quot;5000000001&quot;,&quot;2000000162&quot;,&quot;2000000277&quot;,&quot;6001000630&quot;,&quot;6001000519&quot;,&quot;2000000153&quot;,&quot;5000000010&quot;,&quot;2000000034&quot;,&quot;2000000271&quot;,&quot;2000000151&quot;,&quot;2000000029&quot;,&quot;5000000008&quot;,&quot;2000000024&quot;,&quot;2000000266&quot;,&quot;5000000009&quot;,&quot;2000000146&quot;,&quot;2000000148&quot;,&quot;6001000601&quot;,&quot;6001000603&quot;,&quot;6001000604&quot;,&quot;2000000185&quot;,&quot;6001000607&quot;,&quot;2000000183&quot;,&quot;2000000178&quot;,&quot;1300000029&quot;,&quot;1400000087&quot;,&quot;1400000081&quot;,&quot;6100000100&quot;,&quot;1400000084&quot;,&quot;6001000614&quot;,&quot;2000000046&quot;,&quot;2000000048&quot;,&quot;1400000079&quot;,&quot;1400000075&quot;,&quot;1300000018&quot;,&quot;1400000076&quot;,&quot;1400000071&quot;,&quot;1400000072&quot;,&quot;1000000344&quot;,&quot;6008000067&quot;,&quot;6100000072&quot;,&quot;1000000345&quot;,&quot;6100000073&quot;,&quot;1000000228&quot;,&quot;6008000068&quot;,&quot;2000000513&quot;,&quot;2000000635&quot;,&quot;2000000636&quot;,&quot;1000000473&quot;,&quot;2000000632&quot;,&quot;6008000071&quot;,&quot;2000000638&quot;,&quot;1400000061&quot;,&quot;6100000089&quot;,&quot;1000000215&quot;,&quot;1100000078&quot;,&quot;2000000501&quot;,&quot;2000000504&quot;,&quot;1100000080&quot;,&quot;1400000058&quot;,&quot;2000000505&quot;,&quot;2000000627&quot;,&quot;2000000629&quot;,&quot;6011000026&quot;,&quot;1400000051&quot;,&quot;6100000098&quot;,&quot;6100000096&quot;,&quot;6100000097&quot;,&quot;1000000202&quot;,&quot;1000000320&quot;,&quot;2000000536&quot;,&quot;1000000451&quot;,&quot;2000000531&quot;,&quot;6001000093&quot;,&quot;2000000411&quot;,&quot;1000000310&quot;,&quot;2000000650&quot;,&quot;1700000042&quot;,&quot;1100000099&quot;,&quot;2000000644&quot;,&quot;2000000525&quot;,&quot;2000000526&quot;,&quot;2000000647&quot;,&quot;1000000560&quot;,&quot;1400000039&quot;,&quot;6011000040&quot;,&quot;6011000045&quot;,&quot;2000000406&quot;,&quot;6022000050&quot;,&quot;2000000529&quot;,&quot;6100000036&quot;,&quot;1000000307&quot;,&quot;6016000006&quot;,&quot;2000000681&quot;,&quot;2000000315&quot;,&quot;6022000043&quot;,&quot;2000000317&quot;,&quot;2000000310&quot;,&quot;2000000431&quot;,&quot;6022000046&quot;,&quot;6022000047&quot;,&quot;6022000048&quot;,&quot;6008000034&quot;,&quot;6022000029&quot;,&quot;6008000036&quot;,&quot;1400000013&quot;,&quot;2000000429&quot;,&quot;6100000039&quot;,&quot;1000000528&quot;,&quot;6100000057&quot;,&quot;6100000054&quot;,&quot;6100000052&quot;,&quot;2000000460&quot;,&quot;6100000051&quot;,&quot;2000000336&quot;,&quot;2000000578&quot;,&quot;2000000458&quot;,&quot;2000000217&quot;,&quot;2000000459&quot;,&quot;1400000005&quot;,&quot;2000000211&quot;,&quot;2000000212&quot;,&quot;6022000027&quot;,&quot;1400000002&quot;,&quot;2000000219&quot;,&quot;6100000049&quot;,&quot;6100000069&quot;,&quot;6100000067&quot;,&quot;6016000015&quot;,&quot;6100000068&quot;,&quot;6100000066&quot;,&quot;6016000018&quot;,&quot;2000000450&quot;,&quot;6008000055&quot;,&quot;6008000054&quot;,&quot;2000000210&quot;,&quot;1000000513&quot;,&quot;6022000013&quot;,&quot;2000000201&quot;,&quot;6022000014&quot;,&quot;2000000203&quot;,&quot;1200001921&quot;,&quot;6001000148&quot;,&quot;1000000197&quot;,&quot;1200002289&quot;,&quot;1000000196&quot;,&quot;4000000034&quot;,&quot;6001000034&quot;,&quot;6001000035&quot;,&quot;6001000156&quot;,&quot;6001000039&quot;,&quot;6007000002&quot;,&quot;6007000001&quot;,&quot;1000000059&quot;,&quot;1100000115&quot;,&quot;1000000061&quot;,&quot;6001000160&quot;,&quot;6001000041&quot;,&quot;6001000283&quot;,&quot;3009000009&quot;,&quot;6001000285&quot;,&quot;6001000044&quot;,&quot;4000000043&quot;,&quot;6001000046&quot;,&quot;3009000004&quot;,&quot;6008000009&quot;,&quot;6002000017&quot;,&quot;6002000015&quot;,&quot;6015000010&quot;,&quot;1100000028&quot;,&quot;6014000001&quot;,&quot;1000000049&quot;,&quot;1000000293&quot;,&quot;3009000012&quot;,&quot;1000000294&quot;,&quot;6001000372&quot;,&quot;6015000002&quot;,&quot;3009000019&quot;,&quot;6002000023&quot;,&quot;3009000013&quot;,&quot;6001000134&quot;,&quot;3009000016&quot;,&quot;6001000136&quot;,&quot;6001000378&quot;,&quot;6015000007&quot;,&quot;6001000016&quot;,&quot;4000000018&quot;,&quot;1200000082&quot;,&quot;4100000116&quot;,&quot;1200000081&quot;,&quot;6008000011&quot;,&quot;1100000137&quot;,&quot;1000000038&quot;,&quot;1100000133&quot;,&quot;1200000084&quot;,&quot;4100000118&quot;,&quot;6008000014&quot;,&quot;1000000160&quot;,&quot;1000000040&quot;,&quot;1200001288&quot;,&quot;6014000005&quot;,&quot;1100000140&quot;,&quot;6004000068&quot;,&quot;6003000002&quot;,&quot;1000000164&quot;,&quot;1000000044&quot;,&quot;4000000024&quot;,&quot;6001000261&quot;,&quot;6001000020&quot;,&quot;6001000026&quot;,&quot;1000000025&quot;,&quot;6004000062&quot;,&quot;6003000008&quot;,&quot;6004000063&quot;,&quot;1100000045&quot;,&quot;4100000130&quot;,&quot;6004000059&quot;,&quot;1000000150&quot;,&quot;1100000051&quot;,&quot;6004000058&quot;,&quot;1000000030&quot;,&quot;6001000199&quot;,&quot;6010000002&quot;,&quot;6002000028&quot;,&quot;6010000006&quot;,&quot;6002000026&quot;,&quot;6002000027&quot;,&quot;1000000014&quot;,&quot;1600000004&quot;,&quot;6004000055&quot;,&quot;6004000056&quot;,&quot;4100000139&quot;,&quot;4100000140&quot;,&quot;6001000082&quot;,&quot;6002000035&quot;,&quot;6002000036&quot;,&quot;6001000087&quot;,&quot;6002000031&quot;,&quot;6006000020&quot;,&quot;6011000006&quot;,&quot;4100000026&quot;,&quot;1000000244&quot;,&quot;1000000128&quot;,&quot;1600000015&quot;,&quot;1000000129&quot;,&quot;1000000368&quot;,&quot;1100000067&quot;,&quot;2000000613&quot;,&quot;2000000614&quot;,&quot;1000000010&quot;,&quot;1000000494&quot;,&quot;2000000619&quot;,&quot;2000000616&quot;,&quot;1000000119&quot;,&quot;6010000021&quot;,&quot;1600000020&quot;,&quot;1000000113&quot;,&quot;3012000003&quot;,&quot;1000000117&quot;,&quot;1600000026&quot;,&quot;6010000020&quot;,&quot;3012000006&quot;,&quot;2000000603&quot;,&quot;1000000241&quot;,&quot;1100000060&quot;,&quot;4100000044&quot;,&quot;6001000182&quot;,&quot;6001000062&quot;,&quot;6006000008&quot;,&quot;6001000063&quot;,&quot;6006000006&quot;,&quot;6001000065&quot;,&quot;6006000005&quot;,&quot;6011000001&quot;,&quot;2000000604&quot;,&quot;6001000067&quot;,&quot;6011000002&quot;,&quot;6011000005&quot;,&quot;6011000004&quot;]},&quot;targetIDs&quot;:null,&quot;sourceID&quot;:null}}"/>
</config>
<config key="inObject_1">
<entry key="jsonValue" type="xstring" isnull="true" value=""/>
</config>
</config>
<entry key="warnMessage" type="xstring" value=""/>
<entry key="errorMessage" type="xstring" value=""/>
</config>
